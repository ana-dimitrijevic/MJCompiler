INFO  14:06:08,707 - Compiling source file: D:\Trenutni pp\workspace\MJCompiler\unit tests\functionsTest.mj
INFO  14:06:08,774 - #13 program
INFO  14:06:08,775 - #45 MJProgram
INFO  14:06:08,775 - #45 int
INFO  14:06:08,778 - #45 a
INFO  14:06:08,778 - #12 ,
INFO  14:06:08,779 - #45 b
INFO  14:06:08,779 - #7 ;
INFO  14:06:08,779 - #45 char
INFO  14:06:08,780 - #45 arr
INFO  14:06:08,780 - #36 [
INFO  14:06:08,780 - #37 ]
INFO  14:06:08,780 - #7 ;
INFO  14:06:08,780 - #11 {
INFO  14:06:08,781 - #15 void
INFO  14:06:08,782 - #45 fun
INFO  14:06:08,782 - #10 (
INFO  14:06:08,785 - #5 )
INFO  14:06:08,785 - #45 char
INFO  14:06:08,786 - #45 c
INFO  14:06:08,787 - #7 ;
INFO  14:06:08,787 - #11 {
INFO  14:06:08,787 - #14 print
INFO  14:06:08,789 - #10 (
INFO  14:06:08,789 - #44 f
INFO  14:06:08,789 - #5 )
INFO  14:06:08,791 - #7 ;
INFO  14:06:08,792 - #14 print
INFO  14:06:08,792 - #10 (
INFO  14:06:08,792 - #44 u
INFO  14:06:08,792 - #5 )
INFO  14:06:08,792 - #7 ;
INFO  14:06:08,793 - #14 print
INFO  14:06:08,793 - #10 (
INFO  14:06:08,793 - #44 n
INFO  14:06:08,793 - #5 )
INFO  14:06:08,793 - #7 ;
INFO  14:06:08,793 - #8 return
INFO  14:06:08,793 - #7 ;
INFO  14:06:08,794 - #4 }
INFO  14:06:08,794 - #45 bool
INFO  14:06:08,795 - #45 fun2
INFO  14:06:08,795 - #10 (
INFO  14:06:08,796 - #45 int
INFO  14:06:08,796 - #45 a
INFO  14:06:08,796 - #12 ,
INFO  14:06:08,796 - #45 int
INFO  14:06:08,796 - #45 b
INFO  14:06:08,796 - #5 )
INFO  14:06:08,797 - #45 int
INFO  14:06:08,797 - #45 sum
INFO  14:06:08,797 - #7 ;
INFO  14:06:08,797 - #11 {
INFO  14:06:08,797 - #9 if
INFO  14:06:08,798 - #10 (
INFO  14:06:08,798 - #10 (
INFO  14:06:08,799 - #45 a
INFO  14:06:08,799 - #3 +
INFO  14:06:08,800 - #45 b
INFO  14:06:08,801 - #5 )
INFO  14:06:08,808 - #32 >
INFO  14:06:08,809 - #42 10
INFO  14:06:08,810 - #5 )
INFO  14:06:08,812 - #11 {
INFO  14:06:08,813 - #45 sum
INFO  14:06:08,813 - #6 =
INFO  14:06:08,813 - #45 a
INFO  14:06:08,813 - #3 +
INFO  14:06:08,813 - #45 b
INFO  14:06:08,813 - #7 ;
INFO  14:06:08,814 - #14 print
INFO  14:06:08,814 - #10 (
INFO  14:06:08,814 - #45 sum
INFO  14:06:08,814 - #5 )
INFO  14:06:08,814 - #7 ;
INFO  14:06:08,814 - #8 return
INFO  14:06:08,814 - #43 true
INFO  14:06:08,814 - #7 ;
INFO  14:06:08,815 - #4 }
INFO  14:06:08,815 - #2 else
INFO  14:06:08,815 - #11 {
INFO  14:06:08,816 - #8 return
INFO  14:06:08,816 - #43 false
INFO  14:06:08,816 - #7 ;
INFO  14:06:08,816 - #4 }
INFO  14:06:08,817 - #4 }
INFO  14:06:08,817 - #45 int
INFO  14:06:08,817 - #45 inc
INFO  14:06:08,817 - #10 (
INFO  14:06:08,817 - #45 int
INFO  14:06:08,818 - #45 incrementable
INFO  14:06:08,818 - #5 )
INFO  14:06:08,818 - #11 {
INFO  14:06:08,818 - #45 incrementable
INFO  14:06:08,818 - #22 ++
INFO  14:06:08,818 - #7 ;
INFO  14:06:08,818 - #8 return
INFO  14:06:08,818 - #45 incrementable
INFO  14:06:08,818 - #7 ;
INFO  14:06:08,819 - #4 }
INFO  14:06:08,819 - #15 void
INFO  14:06:08,819 - #45 recursive
INFO  14:06:08,819 - #10 (
INFO  14:06:08,819 - #45 int
INFO  14:06:08,819 - #45 a
INFO  14:06:08,819 - #12 ,
INFO  14:06:08,819 - #45 int
INFO  14:06:08,819 - #45 b
INFO  14:06:08,819 - #5 )
INFO  14:06:08,820 - #11 {
INFO  14:06:08,820 - #45 recursive
INFO  14:06:08,820 - #10 (
INFO  14:06:08,820 - #45 a
INFO  14:06:08,821 - #12 ,
INFO  14:06:08,821 - #45 b
INFO  14:06:08,821 - #5 )
INFO  14:06:08,821 - #7 ;
INFO  14:06:08,821 - #4 }
INFO  14:06:08,823 - #45 int
INFO  14:06:08,823 - #45 recursive2
INFO  14:06:08,823 - #10 (
INFO  14:06:08,823 - #45 int
INFO  14:06:08,823 - #45 a
INFO  14:06:08,823 - #12 ,
INFO  14:06:08,823 - #45 int
INFO  14:06:08,823 - #45 b
INFO  14:06:08,824 - #5 )
INFO  14:06:08,824 - #11 {
INFO  14:06:08,824 - #8 return
INFO  14:06:08,824 - #45 recursive2
INFO  14:06:08,824 - #10 (
INFO  14:06:08,826 - #45 inc
INFO  14:06:08,826 - #10 (
INFO  14:06:08,826 - #45 a
INFO  14:06:08,826 - #5 )
INFO  14:06:08,826 - #12 ,
INFO  14:06:08,826 - #45 b
INFO  14:06:08,826 - #5 )
INFO  14:06:08,827 - #7 ;
INFO  14:06:08,827 - #4 }
INFO  14:06:08,827 - #45 int
INFO  14:06:08,827 - #45 recursive3
INFO  14:06:08,827 - #10 (
INFO  14:06:08,827 - #45 int
INFO  14:06:08,827 - #45 a
INFO  14:06:08,827 - #12 ,
INFO  14:06:08,827 - #45 int
INFO  14:06:08,827 - #45 b
INFO  14:06:08,827 - #5 )
INFO  14:06:08,827 - #11 {
INFO  14:06:08,827 - #8 return
INFO  14:06:08,827 - #45 recursive3
INFO  14:06:08,828 - #10 (
INFO  14:06:08,828 - #45 recursive3
INFO  14:06:08,828 - #10 (
INFO  14:06:08,828 - #45 a
INFO  14:06:08,828 - #12 ,
INFO  14:06:08,828 - #45 b
INFO  14:06:08,828 - #5 )
INFO  14:06:08,828 - #12 ,
INFO  14:06:08,828 - #45 b
INFO  14:06:08,828 - #5 )
INFO  14:06:08,828 - #7 ;
INFO  14:06:08,828 - #4 }
INFO  14:06:08,828 - #15 void
INFO  14:06:08,828 - #45 main
INFO  14:06:08,828 - #10 (
INFO  14:06:08,829 - #5 )
INFO  14:06:08,829 - #45 int
INFO  14:06:08,829 - #45 i
INFO  14:06:08,829 - #7 ;
INFO  14:06:08,829 - #11 {
INFO  14:06:08,829 - #45 arr
INFO  14:06:08,829 - #6 =
INFO  14:06:08,829 - #18 new
INFO  14:06:08,829 - #45 char
INFO  14:06:08,829 - #36 [
INFO  14:06:08,829 - #42 4
INFO  14:06:08,829 - #37 ]
INFO  14:06:08,829 - #7 ;
INFO  14:06:08,830 - #45 arr
INFO  14:06:08,830 - #36 [
INFO  14:06:08,830 - #42 0
INFO  14:06:08,830 - #37 ]
INFO  14:06:08,830 - #6 =
INFO  14:06:08,830 - #44 a
INFO  14:06:08,830 - #7 ;
INFO  14:06:08,831 - #9 if
INFO  14:06:08,831 - #10 (
INFO  14:06:08,831 - #45 fun2
INFO  14:06:08,831 - #10 (
INFO  14:06:08,831 - #42 6
INFO  14:06:08,831 - #12 ,
INFO  14:06:08,831 - #42 6
INFO  14:06:08,832 - #5 )
INFO  14:06:08,832 - #5 )
INFO  14:06:08,832 - #11 {
INFO  14:06:08,832 - #45 i
INFO  14:06:08,832 - #6 =
INFO  14:06:08,832 - #42 0
INFO  14:06:08,832 - #7 ;
INFO  14:06:08,832 - #20 for
INFO  14:06:08,832 - #10 (
INFO  14:06:08,833 - #7 ;
INFO  14:06:08,834 - #45 i
INFO  14:06:08,835 - #34 <
INFO  14:06:08,835 - #42 3
INFO  14:06:08,836 - #7 ;
INFO  14:06:08,836 - #45 i
INFO  14:06:08,837 - #22 ++
INFO  14:06:08,837 - #5 )
INFO  14:06:08,837 - #11 {
INFO  14:06:08,837 - #45 fun
INFO  14:06:08,837 - #10 (
INFO  14:06:08,837 - #5 )
INFO  14:06:08,838 - #7 ;
INFO  14:06:08,838 - #4 }
INFO  14:06:08,838 - #4 }
INFO  14:06:08,839 - #45 funn
INFO  14:06:08,839 - #10 (
INFO  14:06:08,839 - #5 )
INFO  14:06:08,839 - #7 ;
INFO  14:06:08,840 - #45 i
INFO  14:06:08,840 - #10 (
INFO  14:06:08,840 - #5 )
INFO  14:06:08,840 - #7 ;
INFO  14:06:08,840 - #45 fun
INFO  14:06:08,840 - #10 (
INFO  14:06:08,840 - #42 3
INFO  14:06:08,840 - #5 )
INFO  14:06:08,840 - #7 ;
INFO  14:06:08,840 - #45 fun2
INFO  14:06:08,840 - #10 (
INFO  14:06:08,840 - #42 1
INFO  14:06:08,840 - #12 ,
INFO  14:06:08,840 - #44 a
INFO  14:06:08,840 - #5 )
INFO  14:06:08,841 - #7 ;
INFO  14:06:08,841 - #4 }
INFO  14:06:08,841 - #4 }
ERROR 14:06:08,854 - Greska: funn nije deklarisano!  na liniji 59
ERROR 14:06:08,854 - Dezignator imena i nije metoda  na liniji 60
ERROR 14:06:08,854 - Greska: Ocekivano 0 argumenata, a pri pozivu prosledjeno 1 na liniji 61
ERROR 14:06:08,854 - Greska: razlikuju se tip ocekivanog i stvarnog argumenta 2/2 na liniji 62
INFO  14:06:08,854 - Print calls = 4
ERROR 14:06:08,855 - Parsiranje NIJE uspesno zavrseno!
