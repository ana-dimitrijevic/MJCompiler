INFO  14:01:19,919 - Compiling source file: D:\Trenutni pp\workspace\MJCompiler\unit tests\functionsTest.mj
INFO  14:01:19,996 - #13 program
INFO  14:01:19,997 - #45 MJProgram
INFO  14:01:19,997 - #45 int
INFO  14:01:19,998 - #45 a
INFO  14:01:20,000 - #12 ,
INFO  14:01:20,000 - #45 b
INFO  14:01:20,001 - #7 ;
INFO  14:01:20,001 - #45 char
INFO  14:01:20,002 - #45 arr
INFO  14:01:20,002 - #36 [
INFO  14:01:20,002 - #37 ]
INFO  14:01:20,002 - #7 ;
INFO  14:01:20,002 - #11 {
INFO  14:01:20,002 - #15 void
INFO  14:01:20,003 - #45 fun
INFO  14:01:20,004 - #10 (
INFO  14:01:20,006 - #5 )
INFO  14:01:20,007 - #45 char
INFO  14:01:20,007 - #45 c
INFO  14:01:20,008 - #7 ;
INFO  14:01:20,009 - #11 {
INFO  14:01:20,009 - #14 print
INFO  14:01:20,010 - #10 (
INFO  14:01:20,011 - #44 f
INFO  14:01:20,011 - #5 )
INFO  14:01:20,012 - #7 ;
INFO  14:01:20,012 - #14 print
INFO  14:01:20,012 - #10 (
INFO  14:01:20,012 - #44 u
INFO  14:01:20,012 - #5 )
INFO  14:01:20,012 - #7 ;
INFO  14:01:20,012 - #14 print
INFO  14:01:20,012 - #10 (
INFO  14:01:20,013 - #44 n
INFO  14:01:20,013 - #5 )
INFO  14:01:20,013 - #7 ;
INFO  14:01:20,013 - #8 return
INFO  14:01:20,013 - #7 ;
INFO  14:01:20,013 - #4 }
INFO  14:01:20,014 - #45 bool
INFO  14:01:20,014 - #45 fun2
INFO  14:01:20,014 - #10 (
INFO  14:01:20,014 - #45 int
INFO  14:01:20,014 - #45 a
INFO  14:01:20,015 - #12 ,
INFO  14:01:20,015 - #45 int
INFO  14:01:20,015 - #45 b
INFO  14:01:20,015 - #5 )
INFO  14:01:20,016 - #45 int
INFO  14:01:20,016 - #45 sum
INFO  14:01:20,016 - #7 ;
INFO  14:01:20,016 - #11 {
INFO  14:01:20,016 - #9 if
INFO  14:01:20,016 - #10 (
INFO  14:01:20,017 - #10 (
INFO  14:01:20,017 - #45 a
INFO  14:01:20,018 - #3 +
INFO  14:01:20,019 - #45 b
INFO  14:01:20,020 - #5 )
INFO  14:01:20,028 - #32 >
INFO  14:01:20,028 - #42 10
INFO  14:01:20,029 - #5 )
INFO  14:01:20,030 - #11 {
INFO  14:01:20,031 - #45 sum
INFO  14:01:20,031 - #6 =
INFO  14:01:20,031 - #45 a
INFO  14:01:20,031 - #3 +
INFO  14:01:20,031 - #45 b
INFO  14:01:20,031 - #7 ;
INFO  14:01:20,031 - #14 print
INFO  14:01:20,032 - #10 (
INFO  14:01:20,032 - #45 sum
INFO  14:01:20,032 - #5 )
INFO  14:01:20,032 - #7 ;
INFO  14:01:20,032 - #8 return
INFO  14:01:20,032 - #43 true
INFO  14:01:20,032 - #7 ;
INFO  14:01:20,033 - #4 }
INFO  14:01:20,033 - #2 else
INFO  14:01:20,033 - #11 {
INFO  14:01:20,034 - #8 return
INFO  14:01:20,034 - #43 false
INFO  14:01:20,034 - #7 ;
INFO  14:01:20,034 - #4 }
INFO  14:01:20,034 - #4 }
INFO  14:01:20,034 - #45 int
INFO  14:01:20,034 - #45 inc
INFO  14:01:20,035 - #10 (
INFO  14:01:20,035 - #45 int
INFO  14:01:20,035 - #45 incrementable
INFO  14:01:20,035 - #5 )
INFO  14:01:20,035 - #11 {
INFO  14:01:20,035 - #45 incrementable
INFO  14:01:20,035 - #22 ++
INFO  14:01:20,035 - #7 ;
INFO  14:01:20,035 - #8 return
INFO  14:01:20,035 - #45 incrementable
INFO  14:01:20,036 - #7 ;
INFO  14:01:20,036 - #4 }
INFO  14:01:20,036 - #15 void
INFO  14:01:20,036 - #45 recursive
INFO  14:01:20,036 - #10 (
INFO  14:01:20,036 - #45 int
INFO  14:01:20,036 - #45 a
INFO  14:01:20,036 - #12 ,
INFO  14:01:20,036 - #45 int
INFO  14:01:20,036 - #45 b
INFO  14:01:20,037 - #5 )
INFO  14:01:20,037 - #11 {
INFO  14:01:20,037 - #45 recursive
INFO  14:01:20,037 - #10 (
INFO  14:01:20,037 - #45 a
INFO  14:01:20,038 - #12 ,
INFO  14:01:20,038 - #45 b
INFO  14:01:20,038 - #5 )
INFO  14:01:20,038 - #7 ;
INFO  14:01:20,038 - #4 }
INFO  14:01:20,039 - #45 int
INFO  14:01:20,039 - #45 recursive2
INFO  14:01:20,039 - #10 (
INFO  14:01:20,039 - #45 int
INFO  14:01:20,039 - #45 a
INFO  14:01:20,039 - #12 ,
INFO  14:01:20,039 - #45 int
INFO  14:01:20,039 - #45 b
INFO  14:01:20,039 - #5 )
INFO  14:01:20,039 - #11 {
INFO  14:01:20,039 - #8 return
INFO  14:01:20,039 - #45 recursive
INFO  14:01:20,040 - #10 (
INFO  14:01:20,040 - #45 a
INFO  14:01:20,040 - #12 ,
INFO  14:01:20,040 - #45 b
INFO  14:01:20,041 - #5 )
INFO  14:01:20,041 - #7 ;
INFO  14:01:20,041 - #4 }
INFO  14:01:20,041 - #15 void
INFO  14:01:20,041 - #45 main
INFO  14:01:20,041 - #10 (
INFO  14:01:20,041 - #5 )
INFO  14:01:20,041 - #45 int
INFO  14:01:20,041 - #45 i
INFO  14:01:20,041 - #7 ;
INFO  14:01:20,042 - #11 {
INFO  14:01:20,042 - #45 arr
INFO  14:01:20,042 - #6 =
INFO  14:01:20,042 - #18 new
INFO  14:01:20,042 - #45 char
INFO  14:01:20,042 - #36 [
INFO  14:01:20,042 - #42 4
INFO  14:01:20,042 - #37 ]
INFO  14:01:20,042 - #7 ;
INFO  14:01:20,043 - #45 arr
INFO  14:01:20,043 - #36 [
INFO  14:01:20,043 - #42 0
INFO  14:01:20,043 - #37 ]
INFO  14:01:20,043 - #6 =
INFO  14:01:20,043 - #44 a
INFO  14:01:20,043 - #7 ;
INFO  14:01:20,043 - #9 if
INFO  14:01:20,043 - #10 (
INFO  14:01:20,043 - #45 fun2
INFO  14:01:20,044 - #10 (
INFO  14:01:20,044 - #42 6
INFO  14:01:20,044 - #12 ,
INFO  14:01:20,044 - #42 6
INFO  14:01:20,044 - #5 )
INFO  14:01:20,044 - #5 )
INFO  14:01:20,044 - #11 {
INFO  14:01:20,044 - #45 i
INFO  14:01:20,044 - #6 =
INFO  14:01:20,045 - #42 0
INFO  14:01:20,045 - #7 ;
INFO  14:01:20,045 - #20 for
INFO  14:01:20,045 - #10 (
INFO  14:01:20,046 - #7 ;
INFO  14:01:20,047 - #45 i
INFO  14:01:20,048 - #34 <
INFO  14:01:20,048 - #42 3
INFO  14:01:20,052 - #7 ;
INFO  14:01:20,052 - #45 i
INFO  14:01:20,053 - #22 ++
INFO  14:01:20,053 - #5 )
INFO  14:01:20,053 - #11 {
INFO  14:01:20,054 - #45 fun
INFO  14:01:20,055 - #10 (
INFO  14:01:20,055 - #5 )
INFO  14:01:20,055 - #7 ;
INFO  14:01:20,056 - #4 }
INFO  14:01:20,056 - #4 }
INFO  14:01:20,059 - #45 funn
INFO  14:01:20,060 - #10 (
INFO  14:01:20,061 - #5 )
INFO  14:01:20,061 - #7 ;
INFO  14:01:20,061 - #45 i
INFO  14:01:20,061 - #10 (
INFO  14:01:20,061 - #5 )
INFO  14:01:20,061 - #7 ;
INFO  14:01:20,061 - #45 fun
INFO  14:01:20,061 - #10 (
INFO  14:01:20,061 - #42 3
INFO  14:01:20,062 - #5 )
INFO  14:01:20,062 - #7 ;
INFO  14:01:20,062 - #45 fun2
INFO  14:01:20,062 - #10 (
INFO  14:01:20,062 - #42 1
INFO  14:01:20,062 - #12 ,
INFO  14:01:20,062 - #44 a
INFO  14:01:20,062 - #5 )
INFO  14:01:20,063 - #7 ;
INFO  14:01:20,063 - #4 }
INFO  14:01:20,063 - #4 }
ERROR 14:01:20,080 - Greska: povratna vrednost funkcije recursive ne moze biti deo izraza
