INFO  14:03:20,502 - Compiling source file: D:\Trenutni pp\workspace\MJCompiler\unit tests\functionsTest.mj
INFO  14:03:20,577 - #13 program
INFO  14:03:20,578 - #45 MJProgram
INFO  14:03:20,578 - #45 int
INFO  14:03:20,580 - #45 a
INFO  14:03:20,581 - #12 ,
INFO  14:03:20,582 - #45 b
INFO  14:03:20,582 - #7 ;
INFO  14:03:20,582 - #45 char
INFO  14:03:20,584 - #45 arr
INFO  14:03:20,584 - #36 [
INFO  14:03:20,584 - #37 ]
INFO  14:03:20,585 - #7 ;
INFO  14:03:20,585 - #11 {
INFO  14:03:20,585 - #15 void
INFO  14:03:20,586 - #45 fun
INFO  14:03:20,587 - #10 (
INFO  14:03:20,588 - #5 )
INFO  14:03:20,589 - #45 char
INFO  14:03:20,590 - #45 c
INFO  14:03:20,590 - #7 ;
INFO  14:03:20,590 - #11 {
INFO  14:03:20,590 - #14 print
INFO  14:03:20,592 - #10 (
INFO  14:03:20,592 - #44 f
INFO  14:03:20,592 - #5 )
INFO  14:03:20,593 - #7 ;
INFO  14:03:20,593 - #14 print
INFO  14:03:20,593 - #10 (
INFO  14:03:20,593 - #44 u
INFO  14:03:20,593 - #5 )
INFO  14:03:20,593 - #7 ;
INFO  14:03:20,593 - #14 print
INFO  14:03:20,593 - #10 (
INFO  14:03:20,593 - #44 n
INFO  14:03:20,593 - #5 )
INFO  14:03:20,593 - #7 ;
INFO  14:03:20,594 - #8 return
INFO  14:03:20,594 - #7 ;
INFO  14:03:20,594 - #4 }
INFO  14:03:20,594 - #45 bool
INFO  14:03:20,595 - #45 fun2
INFO  14:03:20,595 - #10 (
INFO  14:03:20,595 - #45 int
INFO  14:03:20,595 - #45 a
INFO  14:03:20,595 - #12 ,
INFO  14:03:20,596 - #45 int
INFO  14:03:20,596 - #45 b
INFO  14:03:20,596 - #5 )
INFO  14:03:20,596 - #45 int
INFO  14:03:20,596 - #45 sum
INFO  14:03:20,597 - #7 ;
INFO  14:03:20,597 - #11 {
INFO  14:03:20,597 - #9 if
INFO  14:03:20,597 - #10 (
INFO  14:03:20,598 - #10 (
INFO  14:03:20,598 - #45 a
INFO  14:03:20,598 - #3 +
INFO  14:03:20,600 - #45 b
INFO  14:03:20,601 - #5 )
INFO  14:03:20,606 - #32 >
INFO  14:03:20,607 - #42 10
INFO  14:03:20,607 - #5 )
INFO  14:03:20,609 - #11 {
INFO  14:03:20,609 - #45 sum
INFO  14:03:20,609 - #6 =
INFO  14:03:20,610 - #45 a
INFO  14:03:20,610 - #3 +
INFO  14:03:20,610 - #45 b
INFO  14:03:20,610 - #7 ;
INFO  14:03:20,610 - #14 print
INFO  14:03:20,610 - #10 (
INFO  14:03:20,610 - #45 sum
INFO  14:03:20,610 - #5 )
INFO  14:03:20,610 - #7 ;
INFO  14:03:20,611 - #8 return
INFO  14:03:20,611 - #43 true
INFO  14:03:20,611 - #7 ;
INFO  14:03:20,611 - #4 }
INFO  14:03:20,611 - #2 else
INFO  14:03:20,612 - #11 {
INFO  14:03:20,612 - #8 return
INFO  14:03:20,612 - #43 false
INFO  14:03:20,612 - #7 ;
INFO  14:03:20,613 - #4 }
INFO  14:03:20,613 - #4 }
INFO  14:03:20,613 - #45 int
INFO  14:03:20,613 - #45 inc
INFO  14:03:20,613 - #10 (
INFO  14:03:20,613 - #45 int
INFO  14:03:20,613 - #45 incrementable
INFO  14:03:20,613 - #5 )
INFO  14:03:20,614 - #11 {
INFO  14:03:20,614 - #45 incrementable
INFO  14:03:20,614 - #22 ++
INFO  14:03:20,614 - #7 ;
INFO  14:03:20,614 - #8 return
INFO  14:03:20,614 - #45 incrementable
INFO  14:03:20,614 - #7 ;
INFO  14:03:20,614 - #4 }
INFO  14:03:20,614 - #15 void
INFO  14:03:20,615 - #45 recursive
INFO  14:03:20,615 - #10 (
INFO  14:03:20,615 - #45 int
INFO  14:03:20,615 - #45 a
INFO  14:03:20,615 - #12 ,
INFO  14:03:20,615 - #45 int
INFO  14:03:20,615 - #45 b
INFO  14:03:20,615 - #5 )
INFO  14:03:20,616 - #11 {
INFO  14:03:20,616 - #45 recursive
INFO  14:03:20,616 - #10 (
INFO  14:03:20,617 - #45 a
INFO  14:03:20,617 - #12 ,
INFO  14:03:20,617 - #45 b
INFO  14:03:20,617 - #5 )
INFO  14:03:20,618 - #7 ;
INFO  14:03:20,618 - #4 }
INFO  14:03:20,618 - #45 int
INFO  14:03:20,618 - #45 recursive2
INFO  14:03:20,619 - #10 (
INFO  14:03:20,619 - #45 int
INFO  14:03:20,619 - #45 a
INFO  14:03:20,619 - #12 ,
INFO  14:03:20,619 - #45 int
INFO  14:03:20,620 - #45 b
INFO  14:03:20,620 - #5 )
INFO  14:03:20,620 - #11 {
INFO  14:03:20,620 - #8 return
INFO  14:03:20,620 - #45 recursive
INFO  14:03:20,620 - #10 (
INFO  14:03:20,621 - #45 a
INFO  14:03:20,621 - #12 ,
INFO  14:03:20,621 - #45 b
INFO  14:03:20,622 - #5 )
INFO  14:03:20,622 - #7 ;
INFO  14:03:20,622 - #4 }
INFO  14:03:20,622 - #15 void
INFO  14:03:20,622 - #45 main
INFO  14:03:20,622 - #10 (
INFO  14:03:20,622 - #5 )
INFO  14:03:20,623 - #45 int
INFO  14:03:20,623 - #45 i
INFO  14:03:20,623 - #7 ;
INFO  14:03:20,623 - #11 {
INFO  14:03:20,623 - #45 arr
INFO  14:03:20,623 - #6 =
INFO  14:03:20,623 - #18 new
INFO  14:03:20,623 - #45 char
INFO  14:03:20,623 - #36 [
INFO  14:03:20,623 - #42 4
INFO  14:03:20,623 - #37 ]
INFO  14:03:20,623 - #7 ;
INFO  14:03:20,624 - #45 arr
INFO  14:03:20,624 - #36 [
INFO  14:03:20,624 - #42 0
INFO  14:03:20,624 - #37 ]
INFO  14:03:20,624 - #6 =
INFO  14:03:20,624 - #44 a
INFO  14:03:20,624 - #7 ;
INFO  14:03:20,624 - #9 if
INFO  14:03:20,624 - #10 (
INFO  14:03:20,624 - #45 fun2
INFO  14:03:20,624 - #10 (
INFO  14:03:20,624 - #42 6
INFO  14:03:20,624 - #12 ,
INFO  14:03:20,624 - #42 6
INFO  14:03:20,625 - #5 )
INFO  14:03:20,625 - #5 )
INFO  14:03:20,625 - #11 {
INFO  14:03:20,625 - #45 i
INFO  14:03:20,625 - #6 =
INFO  14:03:20,625 - #42 0
INFO  14:03:20,625 - #7 ;
INFO  14:03:20,625 - #20 for
INFO  14:03:20,625 - #10 (
INFO  14:03:20,626 - #7 ;
INFO  14:03:20,626 - #45 i
INFO  14:03:20,627 - #34 <
INFO  14:03:20,627 - #42 3
INFO  14:03:20,628 - #7 ;
INFO  14:03:20,628 - #45 i
INFO  14:03:20,628 - #22 ++
INFO  14:03:20,628 - #5 )
INFO  14:03:20,629 - #11 {
INFO  14:03:20,630 - #45 fun
INFO  14:03:20,630 - #10 (
INFO  14:03:20,630 - #5 )
INFO  14:03:20,631 - #7 ;
INFO  14:03:20,631 - #4 }
INFO  14:03:20,631 - #4 }
INFO  14:03:20,632 - #45 funn
INFO  14:03:20,634 - #10 (
INFO  14:03:20,634 - #5 )
INFO  14:03:20,634 - #7 ;
INFO  14:03:20,634 - #45 i
INFO  14:03:20,635 - #10 (
INFO  14:03:20,635 - #5 )
INFO  14:03:20,635 - #7 ;
INFO  14:03:20,635 - #45 fun
INFO  14:03:20,635 - #10 (
INFO  14:03:20,635 - #42 3
INFO  14:03:20,635 - #5 )
INFO  14:03:20,635 - #7 ;
INFO  14:03:20,635 - #45 fun2
INFO  14:03:20,635 - #10 (
INFO  14:03:20,635 - #42 1
INFO  14:03:20,636 - #12 ,
INFO  14:03:20,636 - #44 a
INFO  14:03:20,636 - #5 )
INFO  14:03:20,636 - #7 ;
INFO  14:03:20,636 - #4 }
INFO  14:03:20,636 - #4 }
ERROR 14:03:20,650 - Greska: povratna vrednost funkcije recursive ne moze biti deo izraza
