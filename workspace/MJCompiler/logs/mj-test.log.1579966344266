INFO  16:30:56,893 - Compiling source file: D:\Trenutni pp\workspace\MJCompiler\unit tests\functionsTest.mj
INFO  16:30:56,988 - #13 program
INFO  16:30:56,988 - #45 MJProgram
INFO  16:30:56,988 - #45 int
INFO  16:30:56,990 - #45 a
INFO  16:30:56,993 - #12 ,
INFO  16:30:56,993 - #45 b
INFO  16:30:56,994 - #7 ;
INFO  16:30:56,994 - #45 char
INFO  16:30:56,995 - #45 arr
INFO  16:30:56,995 - #36 [
INFO  16:30:56,995 - #37 ]
INFO  16:30:56,996 - #7 ;
INFO  16:30:56,996 - #11 {
INFO  16:30:56,996 - #15 void
INFO  16:30:56,998 - #45 fun
INFO  16:30:56,998 - #10 (
INFO  16:30:56,999 - #5 )
INFO  16:30:57,003 - #45 char
INFO  16:30:57,004 - #45 c
INFO  16:30:57,005 - #7 ;
INFO  16:30:57,005 - #11 {
INFO  16:30:57,006 - #14 print
INFO  16:30:57,009 - #10 (
INFO  16:30:57,011 - #44 f
INFO  16:30:57,011 - #5 )
INFO  16:30:57,014 - #7 ;
INFO  16:30:57,014 - #14 print
INFO  16:30:57,014 - #10 (
INFO  16:30:57,014 - #44 u
INFO  16:30:57,014 - #5 )
INFO  16:30:57,015 - #7 ;
INFO  16:30:57,015 - #14 print
INFO  16:30:57,015 - #10 (
INFO  16:30:57,015 - #44 n
INFO  16:30:57,015 - #5 )
INFO  16:30:57,015 - #7 ;
INFO  16:30:57,015 - #8 return
INFO  16:30:57,016 - #7 ;
INFO  16:30:57,016 - #4 }
INFO  16:30:57,016 - #45 bool
INFO  16:30:57,017 - #45 fun2
INFO  16:30:57,018 - #10 (
INFO  16:30:57,018 - #45 int
INFO  16:30:57,018 - #45 a
INFO  16:30:57,018 - #12 ,
INFO  16:30:57,019 - #45 int
INFO  16:30:57,019 - #45 b
INFO  16:30:57,019 - #5 )
INFO  16:30:57,020 - #45 int
INFO  16:30:57,021 - #45 sum
INFO  16:30:57,021 - #7 ;
INFO  16:30:57,022 - #11 {
INFO  16:30:57,022 - #9 if
INFO  16:30:57,024 - #10 (
INFO  16:30:57,024 - #10 (
INFO  16:30:57,025 - #45 a
INFO  16:30:57,025 - #3 +
INFO  16:30:57,027 - #45 b
INFO  16:30:57,028 - #5 )
INFO  16:30:57,033 - #32 >
INFO  16:30:57,034 - #42 10
INFO  16:30:57,035 - #5 )
INFO  16:30:57,036 - #11 {
INFO  16:30:57,037 - #45 sum
INFO  16:30:57,038 - #6 =
INFO  16:30:57,038 - #45 a
INFO  16:30:57,038 - #3 +
INFO  16:30:57,038 - #45 b
INFO  16:30:57,038 - #7 ;
INFO  16:30:57,038 - #14 print
INFO  16:30:57,039 - #10 (
INFO  16:30:57,039 - #45 sum
INFO  16:30:57,039 - #5 )
INFO  16:30:57,039 - #7 ;
INFO  16:30:57,039 - #8 return
INFO  16:30:57,039 - #43 true
INFO  16:30:57,039 - #7 ;
INFO  16:30:57,040 - #4 }
INFO  16:30:57,041 - #2 else
INFO  16:30:57,042 - #11 {
INFO  16:30:57,044 - #8 return
INFO  16:30:57,044 - #43 false
INFO  16:30:57,044 - #7 ;
INFO  16:30:57,045 - #4 }
INFO  16:30:57,045 - #4 }
INFO  16:30:57,045 - #45 int
INFO  16:30:57,046 - #45 inc
INFO  16:30:57,046 - #10 (
INFO  16:30:57,046 - #45 int
INFO  16:30:57,046 - #45 incrementable
INFO  16:30:57,046 - #5 )
INFO  16:30:57,046 - #11 {
INFO  16:30:57,047 - #45 incrementable
INFO  16:30:57,047 - #22 ++
INFO  16:30:57,047 - #7 ;
INFO  16:30:57,047 - #8 return
INFO  16:30:57,047 - #45 incrementable
INFO  16:30:57,047 - #7 ;
INFO  16:30:57,048 - #4 }
INFO  16:30:57,048 - #15 void
INFO  16:30:57,048 - #45 recursive
INFO  16:30:57,048 - #10 (
INFO  16:30:57,048 - #45 int
INFO  16:30:57,048 - #45 a
INFO  16:30:57,048 - #12 ,
INFO  16:30:57,049 - #45 int
INFO  16:30:57,049 - #45 b
INFO  16:30:57,049 - #5 )
INFO  16:30:57,049 - #11 {
INFO  16:30:57,049 - #45 recursive
INFO  16:30:57,050 - #10 (
INFO  16:30:57,051 - #45 a
INFO  16:30:57,051 - #12 ,
INFO  16:30:57,051 - #45 b
INFO  16:30:57,051 - #5 )
INFO  16:30:57,052 - #7 ;
INFO  16:30:57,052 - #4 }
INFO  16:30:57,052 - #45 int
INFO  16:30:57,052 - #45 recursive2
INFO  16:30:57,052 - #10 (
INFO  16:30:57,052 - #45 int
INFO  16:30:57,053 - #45 a
INFO  16:30:57,053 - #12 ,
INFO  16:30:57,053 - #45 int
INFO  16:30:57,053 - #45 b
INFO  16:30:57,054 - #5 )
INFO  16:30:57,054 - #11 {
INFO  16:30:57,054 - #8 return
INFO  16:30:57,054 - #45 recursive2
INFO  16:30:57,054 - #10 (
INFO  16:30:57,055 - #45 inc
INFO  16:30:57,055 - #10 (
INFO  16:30:57,055 - #45 a
INFO  16:30:57,055 - #5 )
INFO  16:30:57,055 - #12 ,
INFO  16:30:57,056 - #45 b
INFO  16:30:57,056 - #5 )
INFO  16:30:57,056 - #7 ;
INFO  16:30:57,057 - #4 }
INFO  16:30:57,057 - #45 int
INFO  16:30:57,057 - #45 recursive3
INFO  16:30:57,057 - #10 (
INFO  16:30:57,057 - #45 int
INFO  16:30:57,057 - #45 a
INFO  16:30:57,057 - #12 ,
INFO  16:30:57,057 - #45 int
INFO  16:30:57,057 - #45 b
INFO  16:30:57,058 - #5 )
INFO  16:30:57,058 - #11 {
INFO  16:30:57,058 - #8 return
INFO  16:30:57,058 - #45 recursive3
INFO  16:30:57,058 - #10 (
INFO  16:30:57,058 - #45 recursive3
INFO  16:30:57,058 - #10 (
INFO  16:30:57,058 - #45 a
INFO  16:30:57,058 - #12 ,
INFO  16:30:57,058 - #45 b
INFO  16:30:57,058 - #5 )
INFO  16:30:57,059 - #12 ,
INFO  16:30:57,059 - #45 recursive2
INFO  16:30:57,059 - #10 (
INFO  16:30:57,059 - #45 a
INFO  16:30:57,059 - #12 ,
INFO  16:30:57,059 - #45 b
INFO  16:30:57,059 - #5 )
INFO  16:30:57,059 - #5 )
INFO  16:30:57,059 - #7 ;
INFO  16:30:57,059 - #4 }
INFO  16:30:57,059 - #15 void
INFO  16:30:57,059 - #45 main
INFO  16:30:57,059 - #10 (
INFO  16:30:57,059 - #5 )
INFO  16:30:57,059 - #45 int
INFO  16:30:57,059 - #45 i
INFO  16:30:57,059 - #7 ;
INFO  16:30:57,060 - #11 {
INFO  16:30:57,060 - #45 arr
INFO  16:30:57,060 - #6 =
INFO  16:30:57,060 - #18 new
INFO  16:30:57,060 - #45 char
INFO  16:30:57,060 - #36 [
INFO  16:30:57,060 - #42 4
INFO  16:30:57,060 - #37 ]
INFO  16:30:57,060 - #7 ;
INFO  16:30:57,060 - #45 arr
INFO  16:30:57,060 - #36 [
INFO  16:30:57,061 - #42 0
INFO  16:30:57,061 - #37 ]
INFO  16:30:57,061 - #6 =
INFO  16:30:57,061 - #44 a
INFO  16:30:57,061 - #7 ;
INFO  16:30:57,061 - #9 if
INFO  16:30:57,061 - #10 (
INFO  16:30:57,061 - #45 fun2
INFO  16:30:57,061 - #10 (
INFO  16:30:57,061 - #42 6
INFO  16:30:57,061 - #12 ,
INFO  16:30:57,062 - #42 6
INFO  16:30:57,062 - #5 )
INFO  16:30:57,062 - #5 )
INFO  16:30:57,062 - #11 {
INFO  16:30:57,062 - #45 i
INFO  16:30:57,062 - #6 =
INFO  16:30:57,062 - #42 0
INFO  16:30:57,062 - #7 ;
INFO  16:30:57,062 - #20 for
INFO  16:30:57,063 - #10 (
INFO  16:30:57,064 - #7 ;
INFO  16:30:57,065 - #45 i
INFO  16:30:57,066 - #34 <
INFO  16:30:57,066 - #42 3
INFO  16:30:57,067 - #7 ;
INFO  16:30:57,067 - #45 i
INFO  16:30:57,069 - #22 ++
INFO  16:30:57,069 - #5 )
INFO  16:30:57,069 - #11 {
INFO  16:30:57,070 - #45 fun
INFO  16:30:57,071 - #10 (
INFO  16:30:57,071 - #5 )
INFO  16:30:57,071 - #7 ;
INFO  16:30:57,072 - #4 }
INFO  16:30:57,072 - #4 }
INFO  16:30:57,072 - #4 }
INFO  16:30:57,073 - #4 }
INFO  16:30:57,090 - Print calls = 4
INFO  16:30:57,091 - Generating bytecode file: D:\Trenutni pp\workspace\MJCompiler\test\program.obj
INFO  16:30:57,099 - Parsiranje uspesno zavrseno!
