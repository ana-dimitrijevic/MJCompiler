INFO  16:32:24,283 - Compiling source file: D:\Trenutni pp\workspace\MJCompiler\unit tests\functionsTest.mj
INFO  16:32:24,367 - #13 program
INFO  16:32:24,368 - #45 MJProgram
INFO  16:32:24,368 - #45 int
INFO  16:32:24,370 - #45 a
INFO  16:32:24,373 - #12 ,
INFO  16:32:24,373 - #45 b
INFO  16:32:24,373 - #7 ;
INFO  16:32:24,374 - #45 char
INFO  16:32:24,374 - #45 arr
INFO  16:32:24,374 - #36 [
INFO  16:32:24,374 - #37 ]
INFO  16:32:24,374 - #7 ;
INFO  16:32:24,375 - #11 {
INFO  16:32:24,375 - #15 void
INFO  16:32:24,375 - #45 fun
INFO  16:32:24,377 - #10 (
INFO  16:32:24,378 - #5 )
INFO  16:32:24,379 - #45 char
INFO  16:32:24,379 - #45 c
INFO  16:32:24,380 - #7 ;
INFO  16:32:24,380 - #11 {
INFO  16:32:24,380 - #14 print
INFO  16:32:24,382 - #10 (
INFO  16:32:24,382 - #44 f
INFO  16:32:24,382 - #5 )
INFO  16:32:24,383 - #7 ;
INFO  16:32:24,383 - #14 print
INFO  16:32:24,383 - #10 (
INFO  16:32:24,383 - #44 u
INFO  16:32:24,383 - #5 )
INFO  16:32:24,384 - #7 ;
INFO  16:32:24,384 - #14 print
INFO  16:32:24,384 - #10 (
INFO  16:32:24,384 - #44 n
INFO  16:32:24,384 - #5 )
INFO  16:32:24,384 - #7 ;
INFO  16:32:24,384 - #8 return
INFO  16:32:24,385 - #7 ;
INFO  16:32:24,385 - #4 }
INFO  16:32:24,386 - #45 bool
INFO  16:32:24,386 - #45 fun2
INFO  16:32:24,386 - #10 (
INFO  16:32:24,387 - #45 int
INFO  16:32:24,387 - #45 a
INFO  16:32:24,387 - #12 ,
INFO  16:32:24,387 - #45 int
INFO  16:32:24,387 - #45 b
INFO  16:32:24,388 - #5 )
INFO  16:32:24,388 - #45 int
INFO  16:32:24,388 - #45 sum
INFO  16:32:24,388 - #7 ;
INFO  16:32:24,388 - #11 {
INFO  16:32:24,388 - #9 if
INFO  16:32:24,389 - #10 (
INFO  16:32:24,389 - #10 (
INFO  16:32:24,390 - #45 a
INFO  16:32:24,390 - #3 +
INFO  16:32:24,391 - #45 b
INFO  16:32:24,393 - #5 )
INFO  16:32:24,399 - #32 >
INFO  16:32:24,399 - #42 10
INFO  16:32:24,400 - #5 )
INFO  16:32:24,401 - #11 {
INFO  16:32:24,403 - #45 sum
INFO  16:32:24,403 - #6 =
INFO  16:32:24,403 - #45 a
INFO  16:32:24,403 - #3 +
INFO  16:32:24,403 - #45 b
INFO  16:32:24,403 - #7 ;
INFO  16:32:24,403 - #14 print
INFO  16:32:24,403 - #10 (
INFO  16:32:24,403 - #45 sum
INFO  16:32:24,404 - #5 )
INFO  16:32:24,404 - #7 ;
INFO  16:32:24,404 - #8 return
INFO  16:32:24,404 - #43 true
INFO  16:32:24,404 - #7 ;
INFO  16:32:24,404 - #4 }
INFO  16:32:24,404 - #2 else
INFO  16:32:24,404 - #11 {
INFO  16:32:24,405 - #8 return
INFO  16:32:24,405 - #43 false
INFO  16:32:24,405 - #7 ;
INFO  16:32:24,405 - #4 }
INFO  16:32:24,405 - #4 }
INFO  16:32:24,406 - #45 int
INFO  16:32:24,406 - #45 inc
INFO  16:32:24,406 - #10 (
INFO  16:32:24,406 - #45 int
INFO  16:32:24,406 - #45 incrementable
INFO  16:32:24,406 - #5 )
INFO  16:32:24,406 - #11 {
INFO  16:32:24,406 - #45 incrementable
INFO  16:32:24,406 - #22 ++
INFO  16:32:24,406 - #7 ;
INFO  16:32:24,407 - #8 return
INFO  16:32:24,407 - #45 incrementable
INFO  16:32:24,407 - #7 ;
INFO  16:32:24,407 - #4 }
INFO  16:32:24,407 - #15 void
INFO  16:32:24,407 - #45 recursive
INFO  16:32:24,407 - #10 (
INFO  16:32:24,407 - #45 int
INFO  16:32:24,407 - #45 a
INFO  16:32:24,407 - #12 ,
INFO  16:32:24,407 - #45 int
INFO  16:32:24,407 - #45 b
INFO  16:32:24,407 - #5 )
INFO  16:32:24,407 - #11 {
INFO  16:32:24,407 - #45 recursive
INFO  16:32:24,407 - #10 (
INFO  16:32:24,408 - #45 a
INFO  16:32:24,408 - #12 ,
INFO  16:32:24,409 - #45 b
INFO  16:32:24,409 - #5 )
INFO  16:32:24,409 - #7 ;
INFO  16:32:24,409 - #4 }
INFO  16:32:24,409 - #45 int
INFO  16:32:24,410 - #45 recursive2
INFO  16:32:24,410 - #10 (
INFO  16:32:24,410 - #45 int
INFO  16:32:24,410 - #45 a
INFO  16:32:24,410 - #12 ,
INFO  16:32:24,410 - #45 int
INFO  16:32:24,410 - #45 b
INFO  16:32:24,411 - #5 )
INFO  16:32:24,411 - #11 {
INFO  16:32:24,411 - #8 return
INFO  16:32:24,411 - #45 recursive2
INFO  16:32:24,411 - #10 (
INFO  16:32:24,412 - #45 inc
INFO  16:32:24,412 - #10 (
INFO  16:32:24,412 - #45 a
INFO  16:32:24,412 - #5 )
INFO  16:32:24,413 - #12 ,
INFO  16:32:24,413 - #45 b
INFO  16:32:24,413 - #5 )
INFO  16:32:24,413 - #7 ;
INFO  16:32:24,413 - #4 }
INFO  16:32:24,413 - #45 int
INFO  16:32:24,413 - #45 recursive3
INFO  16:32:24,414 - #10 (
INFO  16:32:24,414 - #45 int
INFO  16:32:24,414 - #45 a
INFO  16:32:24,414 - #12 ,
INFO  16:32:24,414 - #45 int
INFO  16:32:24,414 - #45 b
INFO  16:32:24,414 - #5 )
INFO  16:32:24,414 - #11 {
INFO  16:32:24,414 - #8 return
INFO  16:32:24,414 - #45 recursive3
INFO  16:32:24,414 - #10 (
INFO  16:32:24,414 - #45 recursive3
INFO  16:32:24,414 - #10 (
INFO  16:32:24,414 - #45 a
INFO  16:32:24,414 - #12 ,
INFO  16:32:24,414 - #45 b
INFO  16:32:24,414 - #5 )
INFO  16:32:24,415 - #12 ,
INFO  16:32:24,415 - #45 recursive2
INFO  16:32:24,415 - #10 (
INFO  16:32:24,415 - #45 a
INFO  16:32:24,415 - #12 ,
INFO  16:32:24,415 - #45 b
INFO  16:32:24,415 - #5 )
INFO  16:32:24,415 - #5 )
INFO  16:32:24,415 - #7 ;
INFO  16:32:24,415 - #4 }
INFO  16:32:24,416 - #15 void
INFO  16:32:24,416 - #45 main
INFO  16:32:24,416 - #10 (
INFO  16:32:24,416 - #5 )
INFO  16:32:24,416 - #45 int
INFO  16:32:24,416 - #45 i
INFO  16:32:24,416 - #7 ;
INFO  16:32:24,416 - #11 {
INFO  16:32:24,416 - #45 arr
INFO  16:32:24,416 - #6 =
INFO  16:32:24,416 - #18 new
INFO  16:32:24,417 - #45 char
INFO  16:32:24,417 - #36 [
INFO  16:32:24,417 - #42 4
INFO  16:32:24,417 - #37 ]
INFO  16:32:24,417 - #7 ;
INFO  16:32:24,417 - #45 arr
INFO  16:32:24,417 - #36 [
INFO  16:32:24,417 - #42 0
INFO  16:32:24,417 - #37 ]
INFO  16:32:24,417 - #6 =
INFO  16:32:24,417 - #44 a
INFO  16:32:24,417 - #7 ;
INFO  16:32:24,417 - #9 if
INFO  16:32:24,417 - #10 (
INFO  16:32:24,417 - #45 fun2
INFO  16:32:24,417 - #10 (
INFO  16:32:24,418 - #42 6
INFO  16:32:24,418 - #12 ,
INFO  16:32:24,418 - #42 6
INFO  16:32:24,418 - #5 )
INFO  16:32:24,418 - #5 )
INFO  16:32:24,418 - #11 {
INFO  16:32:24,418 - #45 i
INFO  16:32:24,418 - #6 =
INFO  16:32:24,418 - #42 0
INFO  16:32:24,418 - #7 ;
INFO  16:32:24,418 - #20 for
INFO  16:32:24,418 - #10 (
INFO  16:32:24,419 - #7 ;
INFO  16:32:24,423 - #45 i
INFO  16:32:24,424 - #34 <
INFO  16:32:24,424 - #42 3
INFO  16:32:24,425 - #7 ;
INFO  16:32:24,425 - #45 i
INFO  16:32:24,426 - #22 ++
INFO  16:32:24,427 - #5 )
INFO  16:32:24,427 - #11 {
INFO  16:32:24,428 - #45 fun
INFO  16:32:24,428 - #10 (
INFO  16:32:24,428 - #5 )
INFO  16:32:24,429 - #7 ;
INFO  16:32:24,429 - #4 }
INFO  16:32:24,429 - #4 }
INFO  16:32:24,429 - #14 print
INFO  16:32:24,430 - #10 (
INFO  16:32:24,430 - #45 len
INFO  16:32:24,430 - #10 (
INFO  16:32:24,430 - #45 arr
INFO  16:32:24,430 - #5 )
INFO  16:32:24,430 - #5 )
INFO  16:32:24,430 - #7 ;
INFO  16:32:24,430 - #14 print
INFO  16:32:24,430 - #10 (
INFO  16:32:24,430 - #45 ord
INFO  16:32:24,431 - #10 (
INFO  16:32:24,431 - #44 A
INFO  16:32:24,431 - #5 )
INFO  16:32:24,431 - #5 )
INFO  16:32:24,431 - #7 ;
INFO  16:32:24,431 - #14 print
INFO  16:32:24,431 - #10 (
INFO  16:32:24,431 - #45 chr
INFO  16:32:24,431 - #10 (
INFO  16:32:24,431 - #42 65
INFO  16:32:24,431 - #5 )
INFO  16:32:24,431 - #5 )
INFO  16:32:24,431 - #7 ;
INFO  16:32:24,432 - #4 }
INFO  16:32:24,432 - #4 }
INFO  16:32:24,445 - Print calls = 7
INFO  16:32:24,445 - Generating bytecode file: D:\Trenutni pp\workspace\MJCompiler\test\program.obj
INFO  16:32:24,451 - Parsiranje uspesno zavrseno!
