INFO  16:42:05,781 - Compiling source file: D:\Trenutni pp\workspace\MJCompiler\unit tests\functionsTest.mj
INFO  16:42:05,844 - #13 program
INFO  16:42:05,845 - #45 MJProgram
INFO  16:42:05,845 - #45 int
INFO  16:42:05,846 - #45 a
INFO  16:42:05,847 - #12 ,
INFO  16:42:05,848 - #45 b
INFO  16:42:05,848 - #7 ;
INFO  16:42:05,848 - #45 char
INFO  16:42:05,849 - #45 arr
INFO  16:42:05,849 - #36 [
INFO  16:42:05,849 - #37 ]
INFO  16:42:05,849 - #7 ;
INFO  16:42:05,849 - #11 {
INFO  16:42:05,850 - #15 void
INFO  16:42:05,850 - #45 fun
INFO  16:42:05,852 - #10 (
INFO  16:42:05,853 - #5 )
INFO  16:42:05,854 - #45 char
INFO  16:42:05,856 - #45 c
INFO  16:42:05,856 - #7 ;
INFO  16:42:05,856 - #11 {
INFO  16:42:05,856 - #14 print
INFO  16:42:05,858 - #10 (
INFO  16:42:05,858 - #44 f
INFO  16:42:05,858 - #5 )
INFO  16:42:05,859 - #7 ;
INFO  16:42:05,859 - #14 print
INFO  16:42:05,859 - #10 (
INFO  16:42:05,859 - #44 u
INFO  16:42:05,859 - #5 )
INFO  16:42:05,859 - #7 ;
INFO  16:42:05,859 - #14 print
INFO  16:42:05,860 - #10 (
INFO  16:42:05,860 - #44 n
INFO  16:42:05,860 - #5 )
INFO  16:42:05,860 - #7 ;
INFO  16:42:05,860 - #8 return
INFO  16:42:05,860 - #7 ;
INFO  16:42:05,860 - #4 }
INFO  16:42:05,861 - #45 bool
INFO  16:42:05,861 - #45 fun2
INFO  16:42:05,861 - #10 (
INFO  16:42:05,862 - #45 int
INFO  16:42:05,862 - #45 a
INFO  16:42:05,862 - #12 ,
INFO  16:42:05,862 - #45 int
INFO  16:42:05,862 - #45 b
INFO  16:42:05,862 - #5 )
INFO  16:42:05,862 - #45 int
INFO  16:42:05,862 - #45 sum
INFO  16:42:05,862 - #7 ;
INFO  16:42:05,862 - #11 {
INFO  16:42:05,863 - #9 if
INFO  16:42:05,863 - #10 (
INFO  16:42:05,864 - #10 (
INFO  16:42:05,864 - #45 a
INFO  16:42:05,864 - #3 +
INFO  16:42:05,865 - #45 b
INFO  16:42:05,866 - #5 )
INFO  16:42:05,872 - #32 >
INFO  16:42:05,872 - #42 10
INFO  16:42:05,873 - #5 )
INFO  16:42:05,874 - #11 {
INFO  16:42:05,875 - #45 sum
INFO  16:42:05,875 - #6 =
INFO  16:42:05,875 - #45 a
INFO  16:42:05,876 - #3 +
INFO  16:42:05,876 - #45 b
INFO  16:42:05,876 - #7 ;
INFO  16:42:05,876 - #14 print
INFO  16:42:05,876 - #10 (
INFO  16:42:05,876 - #45 sum
INFO  16:42:05,876 - #5 )
INFO  16:42:05,877 - #7 ;
INFO  16:42:05,877 - #8 return
INFO  16:42:05,877 - #43 true
INFO  16:42:05,877 - #7 ;
INFO  16:42:05,877 - #4 }
INFO  16:42:05,877 - #2 else
INFO  16:42:05,877 - #11 {
INFO  16:42:05,878 - #8 return
INFO  16:42:05,878 - #43 false
INFO  16:42:05,878 - #7 ;
INFO  16:42:05,879 - #4 }
INFO  16:42:05,879 - #4 }
INFO  16:42:05,879 - #45 int
INFO  16:42:05,880 - #45 inc
INFO  16:42:05,880 - #10 (
INFO  16:42:05,880 - #45 int
INFO  16:42:05,880 - #45 incrementable
INFO  16:42:05,880 - #5 )
INFO  16:42:05,880 - #11 {
INFO  16:42:05,880 - #45 incrementable
INFO  16:42:05,880 - #22 ++
INFO  16:42:05,880 - #7 ;
INFO  16:42:05,880 - #8 return
INFO  16:42:05,880 - #45 incrementable
INFO  16:42:05,880 - #7 ;
INFO  16:42:05,881 - #4 }
INFO  16:42:05,881 - #15 void
INFO  16:42:05,881 - #45 recursive
INFO  16:42:05,881 - #10 (
INFO  16:42:05,881 - #45 int
INFO  16:42:05,881 - #45 a
INFO  16:42:05,881 - #12 ,
INFO  16:42:05,881 - #45 int
INFO  16:42:05,881 - #45 b
INFO  16:42:05,881 - #5 )
INFO  16:42:05,881 - #11 {
INFO  16:42:05,881 - #45 recursive
INFO  16:42:05,881 - #10 (
INFO  16:42:05,882 - #45 a
INFO  16:42:05,882 - #12 ,
INFO  16:42:05,882 - #45 b
INFO  16:42:05,882 - #5 )
INFO  16:42:05,883 - #7 ;
INFO  16:42:05,883 - #4 }
INFO  16:42:05,883 - #45 int
INFO  16:42:05,884 - #45 recursive2
INFO  16:42:05,884 - #10 (
INFO  16:42:05,884 - #45 int
INFO  16:42:05,884 - #45 a
INFO  16:42:05,884 - #12 ,
INFO  16:42:05,884 - #45 int
INFO  16:42:05,884 - #45 b
INFO  16:42:05,885 - #5 )
INFO  16:42:05,885 - #11 {
INFO  16:42:05,885 - #8 return
INFO  16:42:05,886 - #45 recursive2
INFO  16:42:05,887 - #10 (
INFO  16:42:05,888 - #45 inc
INFO  16:42:05,888 - #10 (
INFO  16:42:05,888 - #45 a
INFO  16:42:05,888 - #5 )
INFO  16:42:05,889 - #12 ,
INFO  16:42:05,889 - #45 b
INFO  16:42:05,889 - #5 )
INFO  16:42:05,889 - #7 ;
INFO  16:42:05,889 - #4 }
INFO  16:42:05,889 - #45 int
INFO  16:42:05,889 - #45 recursive3
INFO  16:42:05,890 - #10 (
INFO  16:42:05,890 - #45 int
INFO  16:42:05,890 - #45 a
INFO  16:42:05,890 - #12 ,
INFO  16:42:05,890 - #45 int
INFO  16:42:05,890 - #45 b
INFO  16:42:05,890 - #5 )
INFO  16:42:05,890 - #11 {
INFO  16:42:05,890 - #8 return
INFO  16:42:05,891 - #45 recursive3
INFO  16:42:05,891 - #10 (
INFO  16:42:05,891 - #45 recursive3
INFO  16:42:05,891 - #10 (
INFO  16:42:05,891 - #45 a
INFO  16:42:05,891 - #12 ,
INFO  16:42:05,891 - #45 b
INFO  16:42:05,891 - #5 )
INFO  16:42:05,892 - #12 ,
INFO  16:42:05,892 - #45 recursive2
INFO  16:42:05,892 - #10 (
INFO  16:42:05,892 - #45 a
INFO  16:42:05,892 - #12 ,
INFO  16:42:05,892 - #45 b
INFO  16:42:05,893 - #5 )
INFO  16:42:05,893 - #5 )
INFO  16:42:05,893 - #7 ;
INFO  16:42:05,894 - #4 }
INFO  16:42:05,895 - #15 void
INFO  16:42:05,895 - #45 main
INFO  16:42:05,895 - #10 (
INFO  16:42:05,895 - #5 )
INFO  16:42:05,896 - #45 int
INFO  16:42:05,896 - #45 i
INFO  16:42:05,896 - #7 ;
INFO  16:42:05,896 - #11 {
INFO  16:42:05,896 - #45 arr
INFO  16:42:05,896 - #6 =
INFO  16:42:05,896 - #18 new
INFO  16:42:05,897 - #45 char
INFO  16:42:05,897 - #36 [
INFO  16:42:05,897 - #42 4
INFO  16:42:05,897 - #37 ]
INFO  16:42:05,897 - #7 ;
INFO  16:42:05,897 - #45 arr
INFO  16:42:05,898 - #36 [
INFO  16:42:05,898 - #42 0
INFO  16:42:05,898 - #37 ]
INFO  16:42:05,898 - #6 =
INFO  16:42:05,898 - #44 a
INFO  16:42:05,898 - #7 ;
INFO  16:42:05,899 - #9 if
INFO  16:42:05,899 - #10 (
INFO  16:42:05,900 - #45 fun2
INFO  16:42:05,900 - #10 (
INFO  16:42:05,900 - #42 6
INFO  16:42:05,900 - #12 ,
INFO  16:42:05,900 - #42 6
INFO  16:42:05,900 - #5 )
INFO  16:42:05,900 - #5 )
INFO  16:42:05,901 - #11 {
INFO  16:42:05,901 - #45 i
INFO  16:42:05,901 - #6 =
INFO  16:42:05,901 - #42 0
INFO  16:42:05,901 - #7 ;
INFO  16:42:05,901 - #20 for
INFO  16:42:05,901 - #10 (
INFO  16:42:05,902 - #7 ;
INFO  16:42:05,903 - #45 i
INFO  16:42:05,904 - #34 <
INFO  16:42:05,905 - #42 3
INFO  16:42:05,906 - #7 ;
INFO  16:42:05,906 - #45 i
INFO  16:42:05,907 - #22 ++
INFO  16:42:05,907 - #5 )
INFO  16:42:05,907 - #11 {
INFO  16:42:05,908 - #45 fun
INFO  16:42:05,908 - #10 (
INFO  16:42:05,908 - #5 )
INFO  16:42:05,909 - #7 ;
INFO  16:42:05,909 - #4 }
INFO  16:42:05,909 - #4 }
INFO  16:42:05,910 - #14 print
INFO  16:42:05,911 - #10 (
INFO  16:42:05,911 - #45 len
INFO  16:42:05,911 - #10 (
INFO  16:42:05,911 - #45 arr
INFO  16:42:05,911 - #5 )
INFO  16:42:05,911 - #5 )
INFO  16:42:05,911 - #7 ;
INFO  16:42:05,912 - #14 print
INFO  16:42:05,912 - #10 (
INFO  16:42:05,912 - #45 ord
INFO  16:42:05,912 - #10 (
INFO  16:42:05,912 - #44 A
INFO  16:42:05,912 - #5 )
INFO  16:42:05,912 - #5 )
INFO  16:42:05,912 - #7 ;
INFO  16:42:05,912 - #14 print
INFO  16:42:05,912 - #10 (
INFO  16:42:05,912 - #45 chr
INFO  16:42:05,913 - #10 (
INFO  16:42:05,913 - #42 65
INFO  16:42:05,913 - #5 )
INFO  16:42:05,913 - #5 )
INFO  16:42:05,913 - #7 ;
INFO  16:42:05,913 - #4 }
INFO  16:42:05,913 - #4 }
INFO  16:42:05,931 - Print calls = 7
INFO  16:42:05,932 - Generating bytecode file: D:\Trenutni pp\workspace\MJCompiler\test\program.obj
INFO  16:42:05,938 - Parsiranje uspesno zavrseno!
