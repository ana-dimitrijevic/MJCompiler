INFO  13:59:44,348 - Compiling source file: D:\Trenutni pp\workspace\MJCompiler\unit tests\functionsTest.mj
INFO  13:59:44,414 - #13 program
INFO  13:59:44,415 - #45 MJProgram
INFO  13:59:44,415 - #45 int
INFO  13:59:44,418 - #45 a
INFO  13:59:44,419 - #12 ,
INFO  13:59:44,420 - #45 b
INFO  13:59:44,420 - #7 ;
INFO  13:59:44,420 - #45 char
INFO  13:59:44,421 - #45 arr
INFO  13:59:44,421 - #36 [
INFO  13:59:44,421 - #37 ]
INFO  13:59:44,421 - #7 ;
INFO  13:59:44,421 - #11 {
INFO  13:59:44,422 - #15 void
INFO  13:59:44,423 - #45 fun
INFO  13:59:44,423 - #10 (
INFO  13:59:44,424 - #5 )
INFO  13:59:44,425 - #45 char
INFO  13:59:44,426 - #45 c
INFO  13:59:44,426 - #7 ;
INFO  13:59:44,426 - #11 {
INFO  13:59:44,427 - #14 print
INFO  13:59:44,430 - #10 (
INFO  13:59:44,430 - #44 f
INFO  13:59:44,430 - #5 )
INFO  13:59:44,431 - #7 ;
INFO  13:59:44,431 - #14 print
INFO  13:59:44,432 - #10 (
INFO  13:59:44,432 - #44 u
INFO  13:59:44,432 - #5 )
INFO  13:59:44,432 - #7 ;
INFO  13:59:44,432 - #14 print
INFO  13:59:44,432 - #10 (
INFO  13:59:44,432 - #44 n
INFO  13:59:44,433 - #5 )
INFO  13:59:44,433 - #7 ;
INFO  13:59:44,433 - #8 return
INFO  13:59:44,433 - #7 ;
INFO  13:59:44,433 - #4 }
INFO  13:59:44,434 - #45 bool
INFO  13:59:44,434 - #45 fun2
INFO  13:59:44,435 - #10 (
INFO  13:59:44,435 - #45 int
INFO  13:59:44,435 - #45 a
INFO  13:59:44,435 - #12 ,
INFO  13:59:44,435 - #45 int
INFO  13:59:44,435 - #45 b
INFO  13:59:44,435 - #5 )
INFO  13:59:44,436 - #45 int
INFO  13:59:44,436 - #45 sum
INFO  13:59:44,436 - #7 ;
INFO  13:59:44,436 - #11 {
INFO  13:59:44,436 - #9 if
INFO  13:59:44,436 - #10 (
INFO  13:59:44,437 - #10 (
INFO  13:59:44,437 - #45 a
INFO  13:59:44,438 - #3 +
INFO  13:59:44,439 - #45 b
INFO  13:59:44,440 - #5 )
INFO  13:59:44,446 - #32 >
INFO  13:59:44,447 - #42 10
INFO  13:59:44,448 - #5 )
INFO  13:59:44,449 - #11 {
INFO  13:59:44,450 - #45 sum
INFO  13:59:44,450 - #6 =
INFO  13:59:44,451 - #45 a
INFO  13:59:44,451 - #3 +
INFO  13:59:44,451 - #45 b
INFO  13:59:44,451 - #7 ;
INFO  13:59:44,451 - #14 print
INFO  13:59:44,451 - #10 (
INFO  13:59:44,451 - #45 sum
INFO  13:59:44,451 - #5 )
INFO  13:59:44,452 - #7 ;
INFO  13:59:44,452 - #8 return
INFO  13:59:44,452 - #43 true
INFO  13:59:44,452 - #7 ;
INFO  13:59:44,452 - #4 }
INFO  13:59:44,452 - #2 else
INFO  13:59:44,452 - #11 {
INFO  13:59:44,453 - #8 return
INFO  13:59:44,453 - #43 false
INFO  13:59:44,453 - #7 ;
INFO  13:59:44,453 - #4 }
INFO  13:59:44,453 - #4 }
INFO  13:59:44,454 - #45 int
INFO  13:59:44,454 - #45 recursive
INFO  13:59:44,454 - #10 (
INFO  13:59:44,454 - #45 int
INFO  13:59:44,454 - #45 a
INFO  13:59:44,454 - #12 ,
INFO  13:59:44,454 - #45 int
INFO  13:59:44,454 - #45 b
INFO  13:59:44,454 - #5 )
INFO  13:59:44,454 - #11 {
INFO  13:59:44,454 - #8 return
INFO  13:59:44,454 - #45 recursive
INFO  13:59:44,454 - #10 (
INFO  13:59:44,455 - #45 a
INFO  13:59:44,455 - #12 ,
INFO  13:59:44,455 - #45 b
INFO  13:59:44,455 - #5 )
INFO  13:59:44,456 - #7 ;
INFO  13:59:44,456 - #4 }
INFO  13:59:44,456 - #15 void
INFO  13:59:44,456 - #45 main
INFO  13:59:44,456 - #10 (
INFO  13:59:44,456 - #5 )
INFO  13:59:44,456 - #45 int
INFO  13:59:44,456 - #45 i
INFO  13:59:44,456 - #7 ;
INFO  13:59:44,456 - #11 {
INFO  13:59:44,456 - #45 arr
INFO  13:59:44,456 - #6 =
INFO  13:59:44,457 - #18 new
INFO  13:59:44,457 - #45 char
INFO  13:59:44,457 - #36 [
INFO  13:59:44,457 - #42 4
INFO  13:59:44,457 - #37 ]
INFO  13:59:44,457 - #7 ;
INFO  13:59:44,457 - #45 arr
INFO  13:59:44,457 - #36 [
INFO  13:59:44,457 - #42 0
INFO  13:59:44,457 - #37 ]
INFO  13:59:44,458 - #6 =
INFO  13:59:44,458 - #44 a
INFO  13:59:44,458 - #7 ;
INFO  13:59:44,458 - #9 if
INFO  13:59:44,458 - #10 (
INFO  13:59:44,458 - #45 fun2
INFO  13:59:44,458 - #10 (
INFO  13:59:44,459 - #42 6
INFO  13:59:44,459 - #12 ,
INFO  13:59:44,459 - #42 6
INFO  13:59:44,459 - #5 )
INFO  13:59:44,459 - #5 )
INFO  13:59:44,459 - #11 {
INFO  13:59:44,459 - #45 i
INFO  13:59:44,460 - #6 =
INFO  13:59:44,460 - #42 0
INFO  13:59:44,460 - #7 ;
INFO  13:59:44,461 - #20 for
INFO  13:59:44,461 - #10 (
INFO  13:59:44,461 - #7 ;
INFO  13:59:44,462 - #45 i
INFO  13:59:44,463 - #34 <
INFO  13:59:44,463 - #42 3
INFO  13:59:44,463 - #7 ;
INFO  13:59:44,463 - #45 i
INFO  13:59:44,464 - #22 ++
INFO  13:59:44,464 - #5 )
INFO  13:59:44,464 - #11 {
INFO  13:59:44,465 - #45 fun
INFO  13:59:44,465 - #10 (
INFO  13:59:44,465 - #5 )
INFO  13:59:44,466 - #7 ;
INFO  13:59:44,466 - #4 }
INFO  13:59:44,467 - #4 }
INFO  13:59:44,467 - #45 funn
INFO  13:59:44,468 - #10 (
INFO  13:59:44,468 - #5 )
INFO  13:59:44,468 - #7 ;
INFO  13:59:44,468 - #45 i
INFO  13:59:44,468 - #10 (
INFO  13:59:44,468 - #5 )
INFO  13:59:44,468 - #7 ;
INFO  13:59:44,468 - #45 fun
INFO  13:59:44,469 - #10 (
INFO  13:59:44,469 - #42 3
INFO  13:59:44,469 - #5 )
INFO  13:59:44,469 - #7 ;
INFO  13:59:44,469 - #45 fun2
INFO  13:59:44,469 - #10 (
INFO  13:59:44,469 - #42 1
INFO  13:59:44,469 - #12 ,
INFO  13:59:44,469 - #44 a
INFO  13:59:44,469 - #5 )
INFO  13:59:44,469 - #7 ;
INFO  13:59:44,469 - #4 }
INFO  13:59:44,469 - #4 }
ERROR 13:59:44,486 - Greska: funn nije deklarisano!  na liniji 48
ERROR 13:59:44,486 - Dezignator imena i nije metoda  na liniji 49
ERROR 13:59:44,486 - Greska: Ocekivano 0 argumenata, a pri pozivu prosledjeno 1 na liniji 50
ERROR 13:59:44,486 - Greska: razlikuju se tip ocekivanog i stvarnog argumenta 2/2 na liniji 51
INFO  13:59:44,486 - Print calls = 4
ERROR 13:59:44,487 - Parsiranje NIJE uspesno zavrseno!
