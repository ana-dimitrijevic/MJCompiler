INFO  14:06:41,128 - Compiling source file: D:\Trenutni pp\workspace\MJCompiler\unit tests\functionsTest.mj
INFO  14:06:41,186 - #13 program
INFO  14:06:41,187 - #45 MJProgram
INFO  14:06:41,187 - #45 int
INFO  14:06:41,189 - #45 a
INFO  14:06:41,189 - #12 ,
INFO  14:06:41,190 - #45 b
INFO  14:06:41,190 - #7 ;
INFO  14:06:41,190 - #45 char
INFO  14:06:41,191 - #45 arr
INFO  14:06:41,191 - #36 [
INFO  14:06:41,191 - #37 ]
INFO  14:06:41,191 - #7 ;
INFO  14:06:41,191 - #11 {
INFO  14:06:41,192 - #15 void
INFO  14:06:41,193 - #45 fun
INFO  14:06:41,194 - #10 (
INFO  14:06:41,197 - #5 )
INFO  14:06:41,198 - #45 char
INFO  14:06:41,200 - #45 c
INFO  14:06:41,200 - #7 ;
INFO  14:06:41,200 - #11 {
INFO  14:06:41,201 - #14 print
INFO  14:06:41,203 - #10 (
INFO  14:06:41,203 - #44 f
INFO  14:06:41,203 - #5 )
INFO  14:06:41,204 - #7 ;
INFO  14:06:41,204 - #14 print
INFO  14:06:41,205 - #10 (
INFO  14:06:41,205 - #44 u
INFO  14:06:41,205 - #5 )
INFO  14:06:41,205 - #7 ;
INFO  14:06:41,205 - #14 print
INFO  14:06:41,205 - #10 (
INFO  14:06:41,205 - #44 n
INFO  14:06:41,205 - #5 )
INFO  14:06:41,206 - #7 ;
INFO  14:06:41,206 - #8 return
INFO  14:06:41,206 - #7 ;
INFO  14:06:41,206 - #4 }
INFO  14:06:41,207 - #45 bool
INFO  14:06:41,207 - #45 fun2
INFO  14:06:41,207 - #10 (
INFO  14:06:41,207 - #45 int
INFO  14:06:41,208 - #45 a
INFO  14:06:41,208 - #12 ,
INFO  14:06:41,208 - #45 int
INFO  14:06:41,208 - #45 b
INFO  14:06:41,208 - #5 )
INFO  14:06:41,209 - #45 int
INFO  14:06:41,209 - #45 sum
INFO  14:06:41,209 - #7 ;
INFO  14:06:41,209 - #11 {
INFO  14:06:41,209 - #9 if
INFO  14:06:41,209 - #10 (
INFO  14:06:41,211 - #10 (
INFO  14:06:41,211 - #45 a
INFO  14:06:41,211 - #3 +
INFO  14:06:41,212 - #45 b
INFO  14:06:41,214 - #5 )
INFO  14:06:41,220 - #32 >
INFO  14:06:41,221 - #42 10
INFO  14:06:41,222 - #5 )
INFO  14:06:41,223 - #11 {
INFO  14:06:41,224 - #45 sum
INFO  14:06:41,224 - #6 =
INFO  14:06:41,224 - #45 a
INFO  14:06:41,224 - #3 +
INFO  14:06:41,225 - #45 b
INFO  14:06:41,225 - #7 ;
INFO  14:06:41,225 - #14 print
INFO  14:06:41,225 - #10 (
INFO  14:06:41,225 - #45 sum
INFO  14:06:41,225 - #5 )
INFO  14:06:41,226 - #7 ;
INFO  14:06:41,226 - #8 return
INFO  14:06:41,226 - #43 true
INFO  14:06:41,226 - #7 ;
INFO  14:06:41,226 - #4 }
INFO  14:06:41,226 - #2 else
INFO  14:06:41,227 - #11 {
INFO  14:06:41,227 - #8 return
INFO  14:06:41,227 - #43 false
INFO  14:06:41,228 - #7 ;
INFO  14:06:41,228 - #4 }
INFO  14:06:41,228 - #4 }
INFO  14:06:41,228 - #45 int
INFO  14:06:41,228 - #45 inc
INFO  14:06:41,228 - #10 (
INFO  14:06:41,228 - #45 int
INFO  14:06:41,228 - #45 incrementable
INFO  14:06:41,229 - #5 )
INFO  14:06:41,229 - #11 {
INFO  14:06:41,229 - #45 incrementable
INFO  14:06:41,229 - #22 ++
INFO  14:06:41,229 - #7 ;
INFO  14:06:41,230 - #8 return
INFO  14:06:41,230 - #45 incrementable
INFO  14:06:41,230 - #7 ;
INFO  14:06:41,230 - #4 }
INFO  14:06:41,230 - #15 void
INFO  14:06:41,230 - #45 recursive
INFO  14:06:41,230 - #10 (
INFO  14:06:41,230 - #45 int
INFO  14:06:41,230 - #45 a
INFO  14:06:41,230 - #12 ,
INFO  14:06:41,231 - #45 int
INFO  14:06:41,231 - #45 b
INFO  14:06:41,231 - #5 )
INFO  14:06:41,231 - #11 {
INFO  14:06:41,231 - #45 recursive
INFO  14:06:41,231 - #10 (
INFO  14:06:41,232 - #45 a
INFO  14:06:41,232 - #12 ,
INFO  14:06:41,232 - #45 b
INFO  14:06:41,232 - #5 )
INFO  14:06:41,233 - #7 ;
INFO  14:06:41,233 - #4 }
INFO  14:06:41,233 - #45 int
INFO  14:06:41,233 - #45 recursive2
INFO  14:06:41,233 - #10 (
INFO  14:06:41,233 - #45 int
INFO  14:06:41,233 - #45 a
INFO  14:06:41,233 - #12 ,
INFO  14:06:41,233 - #45 int
INFO  14:06:41,234 - #45 b
INFO  14:06:41,234 - #5 )
INFO  14:06:41,234 - #11 {
INFO  14:06:41,234 - #8 return
INFO  14:06:41,234 - #45 recursive2
INFO  14:06:41,234 - #10 (
INFO  14:06:41,235 - #45 inc
INFO  14:06:41,235 - #10 (
INFO  14:06:41,235 - #45 a
INFO  14:06:41,235 - #5 )
INFO  14:06:41,236 - #12 ,
INFO  14:06:41,236 - #45 b
INFO  14:06:41,236 - #5 )
INFO  14:06:41,237 - #7 ;
INFO  14:06:41,237 - #4 }
INFO  14:06:41,237 - #45 int
INFO  14:06:41,237 - #45 recursive3
INFO  14:06:41,237 - #10 (
INFO  14:06:41,237 - #45 int
INFO  14:06:41,237 - #45 a
INFO  14:06:41,237 - #12 ,
INFO  14:06:41,237 - #45 int
INFO  14:06:41,237 - #45 b
INFO  14:06:41,237 - #5 )
INFO  14:06:41,237 - #11 {
INFO  14:06:41,237 - #8 return
INFO  14:06:41,237 - #45 recursive3
INFO  14:06:41,238 - #10 (
INFO  14:06:41,238 - #45 recursive3
INFO  14:06:41,238 - #10 (
INFO  14:06:41,238 - #45 a
INFO  14:06:41,238 - #12 ,
INFO  14:06:41,238 - #45 b
INFO  14:06:41,238 - #5 )
INFO  14:06:41,238 - #12 ,
INFO  14:06:41,238 - #45 recursive2
INFO  14:06:41,238 - #10 (
INFO  14:06:41,238 - #45 a
INFO  14:06:41,238 - #12 ,
INFO  14:06:41,238 - #45 b
INFO  14:06:41,239 - #5 )
INFO  14:06:41,239 - #5 )
INFO  14:06:41,239 - #7 ;
INFO  14:06:41,239 - #4 }
INFO  14:06:41,239 - #15 void
INFO  14:06:41,239 - #45 main
INFO  14:06:41,239 - #10 (
INFO  14:06:41,239 - #5 )
INFO  14:06:41,239 - #45 int
INFO  14:06:41,239 - #45 i
INFO  14:06:41,239 - #7 ;
INFO  14:06:41,239 - #11 {
INFO  14:06:41,239 - #45 arr
INFO  14:06:41,239 - #6 =
INFO  14:06:41,240 - #18 new
INFO  14:06:41,240 - #45 char
INFO  14:06:41,240 - #36 [
INFO  14:06:41,240 - #42 4
INFO  14:06:41,240 - #37 ]
INFO  14:06:41,240 - #7 ;
INFO  14:06:41,240 - #45 arr
INFO  14:06:41,240 - #36 [
INFO  14:06:41,240 - #42 0
INFO  14:06:41,240 - #37 ]
INFO  14:06:41,241 - #6 =
INFO  14:06:41,241 - #44 a
INFO  14:06:41,241 - #7 ;
INFO  14:06:41,241 - #9 if
INFO  14:06:41,242 - #10 (
INFO  14:06:41,242 - #45 fun2
INFO  14:06:41,243 - #10 (
INFO  14:06:41,243 - #42 6
INFO  14:06:41,243 - #12 ,
INFO  14:06:41,243 - #42 6
INFO  14:06:41,243 - #5 )
INFO  14:06:41,243 - #5 )
INFO  14:06:41,244 - #11 {
INFO  14:06:41,244 - #45 i
INFO  14:06:41,244 - #6 =
INFO  14:06:41,244 - #42 0
INFO  14:06:41,244 - #7 ;
INFO  14:06:41,244 - #20 for
INFO  14:06:41,244 - #10 (
INFO  14:06:41,245 - #7 ;
INFO  14:06:41,246 - #45 i
INFO  14:06:41,246 - #34 <
INFO  14:06:41,246 - #42 3
INFO  14:06:41,247 - #7 ;
INFO  14:06:41,247 - #45 i
INFO  14:06:41,247 - #22 ++
INFO  14:06:41,247 - #5 )
INFO  14:06:41,248 - #11 {
INFO  14:06:41,248 - #45 fun
INFO  14:06:41,248 - #10 (
INFO  14:06:41,248 - #5 )
INFO  14:06:41,249 - #7 ;
INFO  14:06:41,249 - #4 }
INFO  14:06:41,249 - #4 }
INFO  14:06:41,249 - #45 funn
INFO  14:06:41,250 - #10 (
INFO  14:06:41,250 - #5 )
INFO  14:06:41,250 - #7 ;
INFO  14:06:41,250 - #45 i
INFO  14:06:41,250 - #10 (
INFO  14:06:41,250 - #5 )
INFO  14:06:41,250 - #7 ;
INFO  14:06:41,250 - #45 fun
INFO  14:06:41,250 - #10 (
INFO  14:06:41,250 - #42 3
INFO  14:06:41,250 - #5 )
INFO  14:06:41,250 - #7 ;
INFO  14:06:41,250 - #45 fun2
INFO  14:06:41,250 - #10 (
INFO  14:06:41,250 - #42 1
INFO  14:06:41,251 - #12 ,
INFO  14:06:41,251 - #44 a
INFO  14:06:41,251 - #5 )
INFO  14:06:41,251 - #7 ;
INFO  14:06:41,251 - #4 }
INFO  14:06:41,251 - #4 }
ERROR 14:06:41,262 - Greska: funn nije deklarisano!  na liniji 59
ERROR 14:06:41,262 - Dezignator imena i nije metoda  na liniji 60
ERROR 14:06:41,262 - Greska: Ocekivano 0 argumenata, a pri pozivu prosledjeno 1 na liniji 61
ERROR 14:06:41,262 - Greska: razlikuju se tip ocekivanog i stvarnog argumenta 2/2 na liniji 62
INFO  14:06:41,263 - Print calls = 4
ERROR 14:06:41,263 - Parsiranje NIJE uspesno zavrseno!
