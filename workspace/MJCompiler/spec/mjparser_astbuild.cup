package rs.ac.bg.etf.pp1;
import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal ELSE, PLUS, RBRACE, RPAREN, ASSIGN, SEMI, RETURN, IF, LPAREN, LBRACE,
COMMA, PROG, PRINT, VOID, BREAK, CONST, NEW, READ, FOR, CONTINUE, INC, DEC,
MINUS, MUL, DIV, MOD, AND, OR, EQ, NOTEQ, GR, GEQ, LS, LEQ, LBRACKET, RBRACKET,
DOT, CLASS, ABSTRACT, EXTENDS;
terminal Integer NUMBERCONST;
terminal Boolean BOOLCONST;
terminal Character CHARCONST;
terminal String IDENT;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDecl, MethodTypeName, DesignatorName; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, AddopExpr, VarDeclList, RetType,
Factor, Condition, CondTerm, CondFact; 


nonterminal MethodDeclList, VarDeclar, DeclVar, ConstInitializer, Initializer, VarIdentList, VarIdent, FormalParamList,
FormalParamDecl, FormPars, Statements, Statement, AbstractModif, ClassExtends, ClassVarDeclList, ClassMethDeclList,
DeclVarList, Relop, Addop, Mulop, DesignatorStatement, ForStmBegin, ForCond, AssignStmnt, ActualParamsList,
ActualParams, ForStartDesignatorStm, ForEndDesignatorStm, IfStart, FuncCallStart, ProcCallStart, LeftBrace, PrintOptVal, IfConditions, Else;


precedence left ELSE;


Program ::= (Program) PROG ProgName:p VarDeclList:V1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, V1, M2); RESULT.setLine(pleft); :} 
;

ProgName ::= (ProgName) IDENT:pName {: RESULT=new ProgName(pName); RESULT.setLine(pNameleft); :}
;

VarDeclList ::= (VarDeclarations) VarDeclList:V1 VarDeclar:V2 {: RESULT=new VarDeclarations(V1, V2); RESULT.setLine(V1left); :}  
				|
				(NoVarDeclarations) {: RESULT=new NoVarDeclarations(); :}/* epsilon */ 
;
			
VarDeclar ::= (VarDeclConst) CONST Type:T1 ConstInitializer:C2 SEMI {: RESULT=new VarDeclConst(T1, C2); RESULT.setLine(T1left); :}
			  | 
			  (VarDeclNonConst) DeclVar:D1 {: RESULT=new VarDeclNonConst(D1); RESULT.setLine(D1left); :}
			  |
			  (VarDeclClass) AbstractModif:A1 CLASS IDENT:I2 ClassExtends:C3 LBRACE ClassVarDeclList:C4 ClassMethDeclList:C5 RBRACE {: RESULT=new VarDeclClass(A1, I2, C3, C4, C5); RESULT.setLine(A1left); :}
;

DeclVar ::= (VariableDeclaration) Type:T1 VarIdentList:V2 SEMI {: RESULT=new VariableDeclaration(T1, V2); RESULT.setLine(T1left); :}
            |
            (VariableDeclarationError) error SEMI
            {: parser.report_info("GRESKA: deklaracija promenljive; Uspesno izvrsen oporavak od greske!", null);  :} {: RESULT=new VariableDeclarationError(); :}
;

VarIdentList ::= (MultipleVariableIdentList) VarIdentList:V1 COMMA VarIdent:V2 {: RESULT=new MultipleVariableIdentList(V1, V2); RESULT.setLine(V1left); :}
                 |
                 (SingleVariableIdentList) VarIdent:V1 {: RESULT=new SingleVariableIdentList(V1); RESULT.setLine(V1left); :}
;

VarIdent ::= (SingleVariableIdent) IDENT:name {: RESULT=new SingleVariableIdent(name); RESULT.setLine(nameleft); :}
              |
              (ArrayVariableIdent) IDENT:name LBRACKET RBRACKET {: RESULT=new ArrayVariableIdent(name); RESULT.setLine(nameleft); :}
              |
              (VariableIdentError) error
              {: parser.report_info("GRESKA: identifikator promenljive; Uspesno izvrsen oporavak od greske!", null);  :} {: RESULT=new VariableIdentError(); :}
;

        
DeclVarList ::= (VariableDeclarationList) DeclVarList:D1 DeclVar:D2 {: RESULT=new VariableDeclarationList(D1, D2); RESULT.setLine(D1left); :}
                |
                (NoVariableDeclarationList) {: RESULT=new NoVariableDeclarationList(); :} /* epsilon */
;

AbstractModif ::= (AbstractModifer) ABSTRACT {: RESULT=new AbstractModifer(); :}
				  |
				  (NoAbstractModifer) {: RESULT=new NoAbstractModifer(); :} /* epsilon */
;

ClassExtends ::= (Extension) EXTENDS Type:T1 {: RESULT=new Extension(T1); RESULT.setLine(T1left); :}
				|
				(NoExtesion) {: RESULT=new NoExtesion(); :} /* epsilon */
;
				
ClassVarDeclList ::= (ClassVarDeclarationList) ClassVarDeclList:C1 VarDeclar:V2 {: RESULT=new ClassVarDeclarationList(C1, V2); RESULT.setLine(C1left); :}
					|
					(NoClassVarDeclarationList) {: RESULT=new NoClassVarDeclarationList(); :} /* epsilon */
;	

ClassMethDeclList ::= (ClassMethodDeclList) LBRACE MethodDeclList:M1 RBRACE {: RESULT=new ClassMethodDeclList(M1); RESULT.setLine(M1left); :}
					|
					(NoClassMethodDeclList) {: RESULT=new NoClassMethodDeclList(); :} /* epsilon */
;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :} 
;

ConstInitializer ::= (ConstInitializerList) ConstInitializer:C1 COMMA Initializer:I2 {: RESULT=new ConstInitializerList(C1, I2); RESULT.setLine(C1left); :}
             		 |
             		 (SingleConstInitializer) Initializer:I1 {: RESULT=new SingleConstInitializer(I1); RESULT.setLine(I1left); :}
;
             
Initializer ::= (NumConstInitializer) IDENT:name ASSIGN NUMBERCONST:val {: RESULT=new NumConstInitializer(name, val); RESULT.setLine(nameleft); :}
				|
          		(CharConstInitializer) IDENT:name ASSIGN CHARCONST:val {: RESULT=new CharConstInitializer(name, val); RESULT.setLine(nameleft); :}
          		|
          		(BoolConstInitializer) IDENT:name ASSIGN BOOLCONST:val {: RESULT=new BoolConstInitializer(name, val); RESULT.setLine(nameleft); :}
;


MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
					|
					(NoMethodDeclarations) {: RESULT=new NoMethodDeclarations(); :}/* epsilon */
;

MethodDecl ::= (MethodDeclaration) MethodTypeName:M1 LPAREN FormPars:F2 RPAREN DeclVarList:D3 LeftBrace:L4 Statements:S5 RBRACE {: RESULT=new MethodDeclaration(M1, F2, D3, L4, S5); RESULT.setLine(M1left); :}
			   |
			   (AbstractMethodDeclaration) ABSTRACT MethodTypeName:M1 LPAREN FormPars:F2 RPAREN SEMI {: RESULT=new AbstractMethodDeclaration(M1, F2); RESULT.setLine(M1left); :}
;

LeftBrace ::= (LeftBrace) LBRACE {: RESULT=new LeftBrace(); :}
;

MethodTypeName ::= (MethodTypeName) RetType:retType IDENT:methName {: RESULT=new MethodTypeName(retType, methName); RESULT.setLine(retTypeleft); :}
;

RetType ::= (VoidReturnType) VOID {: RESULT=new VoidReturnType(); :}
             |
            (ReturnType) Type:T1 {: RESULT=new ReturnType(T1); RESULT.setLine(T1left); :}
;
                            
FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :} 
			 | 
			(NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */ 
;

FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
					|
					(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
;
					
FormalParamDecl ::= (SimpleFormalParameter) Type:T1 IDENT:name {: RESULT=new SimpleFormalParameter(T1, name); RESULT.setLine(T1left); :}
                     |
                    (ArrayFormalParameter) Type:T1 IDENT:name LBRACKET RBRACKET {: RESULT=new ArrayFormalParameter(T1, name); RESULT.setLine(T1left); :}
                     |
                    (FormalParameterError) error
                     {: parser.report_info("formal parameter error recovery: successful", null); :} {: RESULT=new FormalParameterError(); :}
;

Statements ::= (StatementsList) Statements:S1 Statement:S2 {: RESULT=new StatementsList(S1, S2); RESULT.setLine(S1left); :} 
				|
			   (NoStatementsList) {: RESULT=new NoStatementsList(); :} /* epsilon */
;

Statement ::= (ReturnStatement) RETURN SEMI {: RESULT=new ReturnStatement(); :}
			  |
			  (BreakStatement) BREAK SEMI {: RESULT=new BreakStatement(); :}
              |
              (ContinueStatement) CONTINUE SEMI {: RESULT=new ContinueStatement(); :}
              |
              (ReturnExpressionStatement) RETURN Expr:E1 SEMI {: RESULT=new ReturnExpressionStatement(E1); RESULT.setLine(E1left); :}
              |
              (ReadStatement) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStatement(D1); RESULT.setLine(D1left); :}
              |
              (PrintStatement) PRINT LPAREN Expr:exp PrintOptVal:P1 RPAREN SEMI {: RESULT=new PrintStatement(exp, P1); RESULT.setLine(expleft); :}
              |
              (IfStatement) IfStart:I1 LPAREN IfConditions:I2 RPAREN Statement:S3 {: RESULT=new IfStatement(I1, I2, S3); RESULT.setLine(I1left); :} 
              |
              (IfElseStatement) IfStart:I1 LPAREN IfConditions:I2 RPAREN Statement:S3 Else:E4 Statement:S5 {: RESULT=new IfElseStatement(I1, I2, S3, E4, S5); RESULT.setLine(I1left); :}
              |
          	  (ForStatement) ForStmBegin:F1 LPAREN ForStartDesignatorStm:F2 SEMI ForCond:F3 SEMI ForEndDesignatorStm:F4 RPAREN Statement:S5 {: RESULT=new ForStatement(F1, F2, F3, F4, S5); RESULT.setLine(F1left); :}
              |
              (StatementDesignator) DesignatorStatement:D1 SEMI {: RESULT=new StatementDesignator(D1); RESULT.setLine(D1left); :}
              |
              (BlockOfStatements) LBRACE Statements:S1 RBRACE {: RESULT=new BlockOfStatements(S1); RESULT.setLine(S1left); :}
              |
              (ProcCall) ProcCallStart:des LPAREN ActualParamsList:A1 RPAREN SEMI {: RESULT=new ProcCall(des, A1); RESULT.setLine(desleft); :}          
;       

ProcCallStart ::= (ProcCallStart) Designator:des {: RESULT=new ProcCallStart(des); RESULT.setLine(desleft); :}
;

Expr  ::= (PositiveExpression) AddopExpr:A1 {: RESULT=new PositiveExpression(A1); RESULT.setLine(A1left); :}
          |
          (NegativeExpression) MINUS AddopExpr:A1 {: RESULT=new NegativeExpression(A1); RESULT.setLine(A1left); :};

AddopExpr ::= (MultipleAddopTerm) AddopExpr:A1 Addop:A2 Term:T3 {: RESULT=new MultipleAddopTerm(A1, A2, T3); RESULT.setLine(A1left); :}
               |
              (SingleAddopTerm) Term:T1 {: RESULT=new SingleAddopTerm(T1); RESULT.setLine(T1left); :};

Term ::= (MultipleFactor) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new MultipleFactor(T1, M2, F3); RESULT.setLine(T1left); :}
          |
         (SingleFactor) Factor:F1 {: RESULT=new SingleFactor(F1); RESULT.setLine(F1left); :};

Factor ::= (DesignatorFactor) Designator:D1 {: RESULT=new DesignatorFactor(D1); RESULT.setLine(D1left); :}
			|
			(NumberConstFactor) NUMBERCONST:val {: RESULT=new NumberConstFactor(val); RESULT.setLine(valleft); :}
            |
           (CharConstFactor) CHARCONST:val {: RESULT=new CharConstFactor(val); RESULT.setLine(valleft); :}
            |
           (BoolConstFactor) BOOLCONST:val {: RESULT=new BoolConstFactor(val); RESULT.setLine(valleft); :}
            |
           (NewObjectFactor) NEW Type:T1 {: RESULT=new NewObjectFactor(T1); RESULT.setLine(T1left); :}
            |
           (NewObjectArrayFactor) NEW Type:typeName LBRACKET Expr:E1 RBRACKET {: RESULT=new NewObjectArrayFactor(typeName, E1); RESULT.setLine(typeNameleft); :}
            |
           (FuncCall) FuncCallStart:des LPAREN ActualParamsList:A1 RPAREN {: RESULT=new FuncCall(des, A1); RESULT.setLine(desleft); :}
            |
           (ParenFactor) LPAREN Expr:E1 RPAREN {: RESULT=new ParenFactor(E1); RESULT.setLine(E1left); :}
;

FuncCallStart ::= (FuncCallStart) Designator:des {: RESULT=new FuncCallStart(des); RESULT.setLine(desleft); :} 
;


Designator ::= (MemberDesignator) DesignatorName:D1 DOT IDENT:memberName {: RESULT=new MemberDesignator(D1, memberName); RESULT.setLine(D1left); :}
               |
               (ArrayDesignator) DesignatorName:D1 LBRACKET Expr:arrExp RBRACKET {: RESULT=new ArrayDesignator(D1, arrExp); RESULT.setLine(D1left); :}
               |
               (SimpleDesignator) DesignatorName:D1 {: RESULT=new SimpleDesignator(D1); RESULT.setLine(D1left); :}
               ;

DesignatorName ::= (DesignatorName) IDENT:name {: RESULT=new DesignatorName(name); RESULT.setLine(nameleft); :}
;

DesignatorStatement ::= (IncDesignatorStatement) Designator:des INC {: RESULT=new IncDesignatorStatement(des); RESULT.setLine(desleft); :}
                         |
                        (DecDesignatorStatement) Designator:des DEC {: RESULT=new DecDesignatorStatement(des); RESULT.setLine(desleft); :}
                         |
						(AssignDesignatorStatement) AssignStmnt:A1 {: RESULT=new AssignDesignatorStatement(A1); RESULT.setLine(A1left); :}         
;
                            
AssignStmnt ::= (AssignStatement) Designator:D1 ASSIGN Expr:E2 {: RESULT=new AssignStatement(D1, E2); RESULT.setLine(D1left); :}
                 |
                (AssignStatementError) error
                {: parser.report_info("assign statement error recovery: successful", null); :} {: RESULT=new AssignStatementError(); :}
;

ActualParamsList ::= (ActualParametersList) ActualParams:A1 {: RESULT=new ActualParametersList(A1); RESULT.setLine(A1left); :}
                  	  |
                 	 (NoActualParametersList) {: RESULT=new NoActualParametersList(); :} /* epsilon */
;
                            
ActualParams ::= (MultipleActualParameters) ActualParams:A1 COMMA Expr:E2 {: RESULT=new MultipleActualParameters(A1, E2); RESULT.setLine(A1left); :}
             	 |
            	 (SingleActualParameter) Expr:E1 {: RESULT=new SingleActualParameter(E1); RESULT.setLine(E1left); :}
;

PrintOptVal ::= (PrintOptionalVal) COMMA NUMBERCONST:val {: RESULT=new PrintOptionalVal(val); RESULT.setLine(valleft); :}
				|
				(NoPrintOptionalVal) {: RESULT=new NoPrintOptionalVal(); :} /* epsilon */
;

IfStart ::= (IfStartStatement) IF {: RESULT=new IfStartStatement(); :}
;

Else ::= (Else) ELSE {: RESULT=new Else(); :};

IfConditions ::= (IfConditions) Condition:C1 {: RESULT=new IfConditions(C1); RESULT.setLine(C1left); :}
;

ForStmBegin  ::= (ForStatementBegin) FOR {: RESULT=new ForStatementBegin(); :};

ForStartDesignatorStm ::= (ForStartDesignatorStatement) DesignatorStatement:D1 {: RESULT=new ForStartDesignatorStatement(D1); RESULT.setLine(D1left); :}
                      |
                     (NoForStartDesignatorStatement) {: RESULT=new NoForStartDesignatorStatement(); :} /* epsilon */
;

ForEndDesignatorStm ::= (ForEndDesignatorStatement) DesignatorStatement:D1 {: RESULT=new ForEndDesignatorStatement(D1); RESULT.setLine(D1left); :}
                      |
                     (NoForEndDesignatorStatement) {: RESULT=new NoForEndDesignatorStatement(); :} /* epsilon */
;
                     
ForCond ::= (ForCondition) Condition:C1 {: RESULT=new ForCondition(C1); RESULT.setLine(C1left); :}
             |
            (NoForCondition) {: RESULT=new NoForCondition(); :} /* epsilon */
;

Condition ::= (MultipleCondition) Condition:C1 OR CondTerm:C2 {: RESULT=new MultipleCondition(C1, C2); RESULT.setLine(C1left); :}
               |
              (SingleCondition) CondTerm:C1 {: RESULT=new SingleCondition(C1); RESULT.setLine(C1left); :}
               |
              (IllegalConditionError) error
             {: parser.report_info("illegal condition error recovery: successful", null); :} {: RESULT=new IllegalConditionError(); :}
;

CondTerm ::= (MultipleFactorConditionTerm) CondTerm:C1 AND CondFact:C2 {: RESULT=new MultipleFactorConditionTerm(C1, C2); RESULT.setLine(C1left); :}
              |
             (SingleFactorConditionTerm) CondFact:C1 {: RESULT=new SingleFactorConditionTerm(C1); RESULT.setLine(C1left); :}
;

CondFact ::= (ExprConditionFactor) Expr:E1 {: RESULT=new ExprConditionFactor(E1); RESULT.setLine(E1left); :}
              |
             (RelopExprConditionFactor) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new RelopExprConditionFactor(E1, R2, E3); RESULT.setLine(E1left); :}
;
             
Addop  ::= (AddopADD) PLUS {: RESULT=new AddopADD(); :}
           |
           (AddopSUB) MINUS {: RESULT=new AddopSUB(); :}
;

Mulop  ::= (MulopMUL) MUL {: RESULT=new MulopMUL(); :}
            |
           (MulopDIV) DIV {: RESULT=new MulopDIV(); :}
            |
           (MulopMOD) MOD {: RESULT=new MulopMOD(); :}
;
             
Relop ::= (RelopEQ) EQ {: RESULT=new RelopEQ(); :}
           |
          (RelopNOTEQ) NOTEQ {: RESULT=new RelopNOTEQ(); :}
           |
          (RelopGR) GR {: RESULT=new RelopGR(); :}
           |
          (RelopGEQ) GEQ {: RESULT=new RelopGEQ(); :}
           |
          (RelopLS) LS {: RESULT=new RelopLS(); :}
           |
          (RelopLEQ) LEQ {: RESULT=new RelopLEQ(); :}
;

