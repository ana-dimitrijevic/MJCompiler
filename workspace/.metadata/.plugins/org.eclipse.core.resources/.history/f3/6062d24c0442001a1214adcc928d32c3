program MJProgram
int niz[];
	int x; int y;
	
{

	// (IfStatement) IfStart LPAREN IfConditions Rparen Statement ElseOpt
	
		Relop relop = relopExprConditionFactor.getRelop();
		relopCode = getRelOP(relop);
		Code.putFalseJump(relopCode, 0);
		int addrToPatch = Code.pc - 2;
		falseBackpatchingStack.peek().add(addrToPatch);
		
		OR
		Code.putJump(0);
		int addrToPatch = Code.pc - 2;
		trueBackpatchingStack.peek().add(addrToPatch);
		Queue<Integer> falseIfBackpatchingStackQueue = falseBackpatchingStack.peek();
		while (!falseIfBackpatchingStackQueue.isEmpty()) {
			Code.fixup(falseIfBackpatchingStackQueue.remove());
		}


	int kkk (int e) int c; {
		 return e+c;
	}

	int k () int c; {
		 return 1;
	}
	
	void kk () int c; {
		 return;
	}

	void main() {
	niz = new int[3];

	//	y=2+3;
		//x++;
		x = k();
		kk();
		k();
	//	kkk(niz[0]);
		if (false && niz==null)
		niz = new int[5];
	//	niz[1]++;
	//	read(niz[1]);
	//	print(niz[1]);
	//	k(1, 2);
		
	}
}