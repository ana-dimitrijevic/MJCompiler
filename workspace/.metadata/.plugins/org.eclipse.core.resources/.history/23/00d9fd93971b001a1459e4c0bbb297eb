package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}



terminal ELSE; 
terminal IDENT;
terminal PLUS;
terminal RBRACE;
terminal RPAREN;
terminal ASSIGN;
terminal SEMI;
terminal RETURN;
terminal IF;
terminal LPAREN;
terminal LBRACE;
terminal COMMA;
terminal NUMBER;
terminal PROG;
terminal PRINT;
terminal VOID;
terminal BREAK;
terminal CONST;
terminal NEW;
terminal READ;
terminal FOR;
terminal CONTINUE;
terminal INC;
terminal DEC;
terminal MINUS;
terminal MUL;
terminal DIV;
terminal MOD;
terminal AND;
terminal OR;
terminal EQ;
terminal NOTEQ;
terminal GR;
terminal GEQ;
terminal LS;
terminal LEQ;
terminal LBRACKET;
terminal RBRACKET;
terminal DOT;
terminal BOOLCONST;
terminal CHARCONST;
terminal NUMBERCONST;
terminal CLASS;
terminal ABSTRACT;
terminal EXTENDS;



nonterminal Program;
nonterminal ProgName;
nonterminal VarDeclList;
nonterminal MethodDeclList;
nonterminal VarDecl;
nonterminal DeclClass;
nonterminal DeclConst;
nonterminal DeclVar;
nonterminal Type;
nonterminal InitList;
nonterminal Init;
nonterminal VarIdentList;
nonterminal VarIdent;
nonterminal MethodDecl;
nonterminal MethodTypeName;
nonterminal FormPars;
nonterminal FormalParamList;
nonterminal FormalParamDecl;
nonterminal StatementList;
nonterminal Statement;
nonterminal Unmatched;
nonterminal Matched;
nonterminal Expr;
nonterminal Term;
nonterminal Factor;
nonterminal ActualPars;
nonterminal ActualParamList;
nonterminal Designator;
nonterminal Addop;


precedence left ELSE;


Program ::= (Program) PROG ProgName:p VarDeclList LBRACE MethodDeclList RBRACE 
;

ProgName ::= (ProgName) IDENT:pName 
;

VarDeclList ::= (VarDeclarations) VarDeclList VarDecl  
				|
				(NoVarDeclarations)/* epsilon */ 
;
				
VarDecl ::= (VarDeclClass) DeclClass
			|
			(VarDeclConst) DeclConst
			| 
			(VarDeclVar) DeclVar		 
;

DeclConst ::= (ConstDeclaration) CONST Type InitList SEMI
;


Type ::= (Type) IDENT:typeName 
;

InitList ::= (InitializerList) InitList COMMA Init
             |
             (SingleInitializer) Init
;
             
Init ::= (NumConstInitializer) IDENT:name ASSIGN NUMBERCONST:val
          |
          (BoolConstInitializer) IDENT:name ASSIGN BOOLCONST:val
          |
          (CharConstInitializer) IDENT:name ASSIGN CHARCONST:val
;
        
DeclVar ::= (VariableDeclaration) Type VarIdentList SEMI
            |
            (VariableDeclarationError) error SEMI
            {: parser.report_info("GRESKA: deklaracija promenljive; Uspesno izvrsen oporavak od greske!", null);  :}
;


VarIdentList ::= (MultipleVariableIdentList) VarIdentList COMMA VarIdent
                 |
                 (OneVariableIdentList) VarIdent
;

VarIdent ::= (SingleVariableIdent) IDENT:name
              |
              (ArrayVariableIdent) IDENT:name LBRACKET RBRACKET
              |
              (VariableIdentError) error
              {: parser.report_info("GRESKA: identifikator promenljive; Uspesno izvrsen oporavak od greske!", null);  :}
;

// APSTRAKTNA KLASA !!!

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
					|
					(NoMethodDecl)/* epsilon */
					;

MethodDecl ::= (MethodDecl) MethodTypeName
			   LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE 
			   ;

MethodTypeName ::= (MethodTypeName) Type:retType IDENT:methName
;

FormPars ::= (FormParams) FormalParamList | (NoFormParam) /* epsilon */ ;

FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
					|
					(SingleFormalParamDecl) FormalParamDecl
					;
					
FormalParamDecl ::= (FormalParamDecl) Type IDENT ;

StatementList ::= (Statements) StatementList Statement 
					|
				  (NoStmt) /* epsilon */
				  ;

Statement ::= (MatchedStmt) Matched | (UnmachedStmt) Unmatched ;

Unmatched ::= (UnmatchedIf) IF Expr Statement | (UnmatchedIfElse) IF Expr Matched ELSE Unmatched;
	
				  
Matched ::= (Assignment) Designator:dest ASSIGN Expr:e SEMI 
			  |
			  (ErrAssignment) Designator ASSIGN error SEMI
			  {: parser.log.debug("Uspesan oporavak od greske pri dodeli vrednosti."); :}
			  |
			  (PrintStmt) PRINT LPAREN Expr RPAREN SEMI 
			  |
			  (ReturnExpr) RETURN Expr:t SEMI
			  |
			  (ReturnNoExpr) RETURN SEMI
			  | 
			  (MatchedIf) IF Expr Matched ELSE Matched
			  |
			  (ProcCall) Designator:func LPAREN ActualPars RPAREN SEMI
			  ;
			  
Expr ::= (AddExpr) Expr:te Addop Term:t
		 |
		 (TermExpr) Term:t
		 ;

Term ::= (Term) Factor:t 
;

Factor ::= (Const) NUMBERCONST
			|
		   (Var) Designator:d
		    |
		   (FuncCall) Designator:func LPAREN ActualPars RPAREN
		   ;

ActualPars ::= (Actuals) ActualParamList 
				| 
			   (NoActuals) /* epsilon */ 
			   ;
			   
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
					|
					(ActualParam) Expr
					;

Designator ::= (Designator) IDENT:name
;

Addop ::= (Addop) PLUS ;

					
          	          